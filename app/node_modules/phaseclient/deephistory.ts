import Discussion from "phaseclient/discussion";
import Message from "phaseclient/message";

class DeepHistory {
    private _oldestId: string;
    private _newestId: string;
    private _messages: Message[] = [];
    private _discussion: Discussion | null;
    private _rootMessageId: string;
    private _retrievalInProgress: boolean;
    private _obtainedOldest: boolean = false;

    constructor(discussion: Discussion | null, rootMessageId: string) {
        this._discussion = discussion;
        this._rootMessageId = rootMessageId;
    }

    public get oldestId(): string {
        return this._oldestId;
    }

    public get newestId(): string {
        return this._newestId;
    }

    public get messages(): Message[] {
        return this._messages;
    }

    public get discussion(): Discussion | null {
        return this._discussion;
    }

    public get rootMessageId(): string {
        return this._rootMessageId;
    }

    public get retrievalInProgress(): boolean {
        return this._retrievalInProgress;
    }

    public get obtainedOldest(): boolean {
        return this._obtainedOldest;
    }

    public set oldestId(oldestId: string) {
        this._oldestId = oldestId;
    }

    public set newestId(newestId: string) {
        this._newestId = newestId;
    }

    public set retrievalInProgress(retrievalInProgress: boolean) {
        this._retrievalInProgress = retrievalInProgress;
    }

    public set obtainedOldest(obtainedOldest: boolean) {
        this._obtainedOldest = obtainedOldest;
    }

    public set discussion(discussion: Discussion | null) {
        if (this.discussion !== null) {
            return;
        }

        this._discussion = discussion;
    }

    public addMessages(messages: Message[]): void {
        this._messages = this._messages.concat(messages);
    }

    public prependMessages(messages: Message[]): void {
        this._messages = messages.concat(this._messages);
    }
}

export default DeepHistory;
