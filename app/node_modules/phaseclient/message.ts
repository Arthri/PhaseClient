import Moment from "moment";
import BBCode from "phaseclient/bbcode";
import PhaseClient from "phaseclient/client";
import SafeString from "phaseclient/safestring";
import CoreMessage from "phasecore/message";
import Discussion from "phaseclient/discussion";

class Message extends CoreMessage {
    public static curlocalMessageId = 0;
    private _id: number;
    private _formattedTimestamp: string;
    private _contentStyled: string = "";
    private _localMessageId: number;
    protected _isInProgress: boolean;

    constructor(id: number, userId: number, avatar: string, username: string, guestname: string,
                content: string, timestamp: number, systemName: string, tag: string, tagColour: string) {
        super(userId, avatar, username, guestname, content, timestamp, systemName, tag, tagColour);

        this._id = id;
        this._username = new SafeString(username);
        this._guestname = new SafeString(guestname);
        this._content = new SafeString(content);
        this._isInProgress = false;
        this._localMessageId = Message.curlocalMessageId++;
    }

    /**
     * Gets a unique id for this message
     */
    public get id(): number {
        return this._id;
    }

    public get localMessageId(): number {
        return this._localMessageId;
    }

    public get isInProgress(): boolean {
        return this._isInProgress;
    }

    /* Gets a timestamp like "Saturday at 7:16 PM" */
    public getFormattedTimestamp(): string {
        if (!this._formattedTimestamp)  {
            this._formattedTimestamp = Moment(this.timestamp * 1000).calendar("", {
                sameDay: "[Today at] LT",
                lastWeek: "dddd [at] LT",
                sameElse: "LT, dddd Do MMM, YYYY"
            });
        }

        return this._formattedTimestamp;
    }

    public updateContent(content: string): void {
        super.updateContent(content);
        this._contentStyled = "";
    }

    /* Get BBCode formatted content */
    public getContentStyled(discussion: Discussion): string {
        if (this._contentStyled.length === 0) {
            this._contentStyled = BBCode.convertText(this.content.getContentWithHtmlEscaped(), discussion);
        }

        return this._contentStyled;
    }
}

export default Message;
