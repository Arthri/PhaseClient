import { BooleanHash, MessageHash, UserHash } from "phaseclient/hash";
import Message from "phaseclient/message";
import CoreDiscussion from "phasecore/discussion";
import User from "phasecore/user";

class Discussion extends CoreDiscussion {
    private _recentMessage: Message;
    private _ourLiveTypingMessage: string | null = null;
    private _oldestMessageIdReceived: number = -1;
    private _waitingForHistory: boolean = false;
    private _isBeingViewed: boolean = false;
    private _hasUnreadMessages: boolean = false;
    private _alertsEnabled: boolean = false;

    constructor(id: number, name: string, creator: number, members: User[], recentMessage: Message) {
        super(id, name, creator, members);
        this._recentMessage = recentMessage;
    }

    public get recentMessage(): Message {
        return this._recentMessage;
    }

    public get ourLiveTypingMessage(): string | null {
        return this._ourLiveTypingMessage;
    }

    public get oldestMessageIdReceived(): number {
        return this._oldestMessageIdReceived;
    }

    public get waitingForHistory(): boolean {
        return this._waitingForHistory;
    }

    public get isBeingViewed(): boolean {
        return this._isBeingViewed;
    }

    public get hasUnreadMessages(): boolean {
        return this._hasUnreadMessages;
    }

    public get hasAlertsEnabled(): boolean {
        return this._alertsEnabled;
    }

    public set ourLiveTypingMessage(message: string | null) {
        this._ourLiveTypingMessage = message;
    }

    public set recentMessage(recentMessage: Message) {
        this._recentMessage = recentMessage;
    }

    public set waitingForHistory(waitingForHistory: boolean) {
        this._waitingForHistory = waitingForHistory;
    }

    public set oldestMessageIdReceived(messageId: number) {
        this._oldestMessageIdReceived = messageId;
    }

    public set isBeingViewed(isBeingViewed: boolean) {
        this._isBeingViewed = isBeingViewed;
    }

    public set hasUnreadMessages(hasUnreadMessages: boolean) {
        this._hasUnreadMessages = hasUnreadMessages;
    }

    public set alertsEnabled(enabled: boolean) {
        this._alertsEnabled = enabled;
    }

    public appendMessage(message: Message): void {
        super.appendMessage(message);

        // Don't store too many messages
        if (this._messages.length > 200) {
            this._messages.shift();
        }
    }
}

export default Discussion;
