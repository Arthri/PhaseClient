import CoreDiscussion from 'phasecore/discussion';
import User from 'phasecore/user';
import { UserHash, MessageHash, BooleanHash } from 'phase/hash';
import Message from 'phase/message';

class Discussion extends CoreDiscussion {
    private recentMessage: Message;
    private ourLiveTypingMessage: string | null;
    private oldestMessageIdReceived: number;
    private isBeingViewed: boolean;
    
    
    constructor(id: number, name: string, creator: number, members: Array<User>, recentMessage: Message) {
        super(id, name, creator, members);
        this.recentMessage = recentMessage;
        this.ourLiveTypingMessage = null;
        this.oldestMessageIdReceived = -1;
        this.isBeingViewed = false;
    }

    public getRecentMessage(): Message {
        return this.recentMessage;
    }

    public getOurLiveTypingMessage(): string | null {
        return this.ourLiveTypingMessage;
    }

    public getOldestMessageIdReceived(): number {
        return this.oldestMessageIdReceived;
    }

    public setOurLiveTypingMessage(message: string | null): void {
        this.ourLiveTypingMessage = message;
    }

    public setOldestMessageIdReceived(messageId: number): void {
        this.oldestMessageIdReceived = messageId;
    }
}

export default Discussion;