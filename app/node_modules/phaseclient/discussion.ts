import { BooleanHash, MessageHash, UserHash } from "phaseclient/hash";
import Message from "phaseclient/message";
import CoreDiscussion from "phasecore/discussion";
import User from "phasecore/user";

class Discussion extends CoreDiscussion {
    private recentMessage: Message;
    private ourLiveTypingMessage: string | null = null;
    private oldestMessageIdReceived: number = -1;
    private waitingForHistory: boolean = false;
    private isBeingViewed: boolean = false;
    private hasUnreadMessages: boolean = false;
    private alertsEnabled: boolean = false;

    constructor(id: number, name: string, creator: number, members: User[], recentMessage: Message) {
        super(id, name, creator, members);
        this.recentMessage = recentMessage;
    }

    public getRecentMessage(): Message {
        return this.recentMessage;
    }

    public getOurLiveTypingMessage(): string | null {
        return this.ourLiveTypingMessage;
    }

    public getOldestMessageIdReceived(): number {
        return this.oldestMessageIdReceived;
    }

    public getWaitingForHistory(): boolean {
        return this.waitingForHistory;
    }

    public getIsBeingViewed(): boolean {
        return this.isBeingViewed;
    }

    public getHasUnreadMessages(): boolean {
        return this.hasUnreadMessages;
    }

    public getHasAlertsEnabled(): boolean {
        return this.alertsEnabled;
    }

    public setOurLiveTypingMessage(message: string | null): void {
        this.ourLiveTypingMessage = message;
    }

    public setRecentMessage(recentMessage: Message): void {
        this.recentMessage = recentMessage;
    }

    public setWaitingForHistory(waitingForHistory: boolean): void {
        this.waitingForHistory = waitingForHistory;
    }

    public appendMessage(message: Message): void {
        super.appendMessage(message);

        // Don't store too many messages
        if (this.messages.length > 200) {
            this.messages.shift();
        }
    }

    public setOldestMessageIdReceived(messageId: number): void {
        this.oldestMessageIdReceived = messageId;
    }

    public setIsBeingViewed(isBeingViewed: boolean): void {
        this.isBeingViewed = isBeingViewed;
    }

    public setHasUnreadMessages(hasUnreadMessages: boolean): void {
        this.hasUnreadMessages = hasUnreadMessages;
    }

    public setAlertsEnabled(enabled: boolean): void {
        this.alertsEnabled = enabled;
    }
}

export default Discussion;
