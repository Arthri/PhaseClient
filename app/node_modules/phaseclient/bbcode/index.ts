import Item from 'phasecore/item';
import Conversions from 'phaseclient/bbcode/conversions';

class BBCode {
    static videoConversion = [
        // Videos
        [
            /(?:(?:http|https):\/\/)?(?:www\.)?((?:youtube\.com|youtu\.be)\/(?:watch\?v=)?([^\s&]+)([^\s]*))/g,
            '<a href="https://$1" target="_blank">$1</a><br /><div class="youtube-container"><div class="youtube-player" data-id="$2"><img class="youtube-thumb autoLinkedImage" src="https://i.ytimg.com/vi/$2/hqdefault.jpg"><div class="play-button"></div></div></div>'
        ],
        [
            /(?:(?:http|https):\/\/)?((?:www\.)?(?:vimeo\.com)\/(.+))/g,
            '<a href="https://$1" target="_blank">$1</a><br /><iframe src="//player.vimeo.com/video/$2" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe><br />'
        ],
        [
            /(?:(?:http|https):\/\/)?((?:dailymotion\.com|dai\.ly)\/(.+))/g,
            '<a href="https://$1" target="_blank">$1</a><br /><iframe frameborder="0" width="560" height="315" src="https://www.dailymotion.com/embed/video/$2?logo=0&foreground=ffffff&highlight=1bb4c6&background=000000" allowfullscreen></iframe><br />',
        ]
    ]

    static autoVideoFormat(match, link, protocol, www, domain, regexDotGroup, tld, port, filepath, getParams, imageExtension, endChar): string {
        //console.log(match);
        var videoSearchLength = this.videoConversion.length;
        var videoSites = ["youtube", "youtu", "dailymotion", "vimeo"];
        var output = link + endChar;
        if (videoSites.indexOf(domain) > -1 && (typeof getParams !== 'undefined' && getParams.length > 0 || domain == "youtu" && tld == ".be")) {
            for (var i = 0; i < videoSearchLength; i++) {
                output = output.replace(this.videoConversion[i][0], this.videoConversion[i][1]);
            }
        } else if (typeof imageExtension !== 'undefined' && imageExtension.length > 0) {
            var exp = /((\b((https?|ftp|file):\/\/)?[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])\.(?:jpe?g|gif|png))/ig;
            output = link.replace(exp, function (url) {
                if (url.indexOf('https') === -1) {
                    return "<a href='" + url + "'>" + url + "</a><br><img class=\"autoLinkedImage\" src='https://t.dark-gaming.com:3001/route/" + encodeURIComponent(url) + "'/>" + endChar;
                } else {
                    return "<a href='" + url + "'>" + url + "</a><br><img class=\"autoLinkedImage\" src='" + url + "'/>" + endChar;
                }
            });
        } else {
            if (typeof protocol !== 'undefined' && protocol.length > 0) {
                output = '<a href="' + link + '" target="_blank">' + link + '</a>' + endChar;
            } else {
                output = '<a href="http://' + link + '" target="_blank">' + link + '</a>' + endChar;
            }
        }

        return output;
    }

    static convertText(text: string) {
        if (typeof text === 'undefined' || text === null)
            return text;

        text = text.replace(/\r?\n/g, '<br />');

        for (let i = 0; i < Conversions.length; i++) {
            text = text.replace(Conversions[i][0], Conversions[i][1]);
        }

        // This only allows "<br />" (new lines) if the new line is not inside a <ul> and/or <li>
        text = text.replace("/(?!(\<ul\>|\<li\>|\<\/li\>).*?)\\n(?!((?!<).)*?(\<\/ul\>|\<\/li\>|\<li\>))/is", ' <br />');
        return text;
    }

    static displayYoutubeVideo(elem) {
        var videoID = elem.attr('data-id');
        var parent = elem.parent();
        elem.remove();
        parent.append('<iframe width="640" height="360" src="https://www.youtube.com/embed/' + videoID + '?modestbranding=1&rel=0&autoplay=1&wmode=transparent&theme=light&color=white" frameborder="0" allowfullscreen></iframe>');
    }

    // Currently only matches a URL with an image extension
    static replaceURLWithImage(text) {
        if (typeof (text) === 'undefined')
            return text;

        var exp = /((\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])+\.(?:jpe?g|gif|png))/ig;
        return text.replace(exp, `<a href='$1'>$1</a><br><img class="autoLinkedImage" src='$1' onerror="this.style.display='none'"/>`);
    }

    static getItemNameFromID(id) {
        if (id > 0) {
            return Item.IDs[id];
        } else if (id < 0) {
            return Item.NIDs[id];
        } else {
            // Return at least something...
            return "Beenade";
        }
    }

    static getItemImageNameFromID(id) {
        // Fallback
        if (typeof Item.IDs[id] === 'undefined' && typeof Item.NIDs[id] === 'undefined')
            return "Beenade";

        if (id > 0) {
            return encodeURIComponent(Item.IDs[id].replace(/ /g, '_'));
        } else if (id < 0) {
            return encodeURIComponent(Item.NIDs[id].replace(/ /g, '_'));
        } else {
            // Return at least something...
            return "Beenade";
        }
    }
}

export default BBCode;