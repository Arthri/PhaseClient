import Item from 'phasecore/item';
import Conversions from 'phaseclient/bbcode/conversions';

class BBCode {
    static convertText(text: string) {
        if (typeof text === 'undefined' || text === null)
            return text;

        text = text.replace(/\r?\n/g, '<br />');

        for (let i = 0; i < Conversions.length; i++) {
            text = text.replace(<RegExp>Conversions[i][0], <string>Conversions[i][1]);
        }

        // This only allows "<br />" (new lines) if the new line is not inside a <ul> and/or <li>
        text = text.replace("/(?!(\<ul\>|\<li\>|\<\/li\>).*?)\\n(?!((?!<).)*?(\<\/ul\>|\<\/li\>|\<li\>))/is", ' <br />');
        return text;
    }

    static displayYoutubeVideo(elem) {
        var videoID = elem.attr('data-id');
        var parent = elem.parent();
        elem.remove();
        parent.append('<iframe width="640" height="360" src="https://www.youtube.com/embed/' + videoID + '?modestbranding=1&rel=0&autoplay=1&wmode=transparent&theme=light&color=white" frameborder="0" allowfullscreen></iframe>');
    }

    // Currently only matches a URL with an image extension
    static replaceURLWithImage(text) {
        if (typeof (text) === 'undefined')
            return text;

        var exp = /((\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])+\.(?:jpe?g|gif|png))/ig;
        return text.replace(exp, `<a href='$1'>$1</a><br><img class="autoLinkedImage" src='$1' onerror="this.style.display='none'"/>`);
    }

    static getItemNameFromID(id) {
        if (id > 0) {
            return Item.IDs[id];
        } else if (id < 0) {
            return Item.NIDs[id];
        } else {
            // Return at least something...
            return "Beenade";
        }
    }

    static getItemImageNameFromID(id) {
        // Fallback
        if (typeof Item.IDs[id] === 'undefined' && typeof Item.NIDs[id] === 'undefined')
            return "Beenade";

        if (id > 0) {
            return encodeURIComponent(Item.IDs[id].replace(/ /g, '_'));
        } else if (id < 0) {
            return encodeURIComponent(Item.NIDs[id].replace(/ /g, '_'));
        } else {
            // Return at least something...
            return "Beenade";
        }
    }
}

export default BBCode;