const videoConversion = [
    // Videos
    [
        /(?:(?:http|https):\/\/)?(?:www\.)?((?:youtube\.com|youtu\.be)\/(?:watch\?v=)?([^\s&]+)([^\s]*))/g,
        '<a href="https://$1" target="_blank">$1</a><br /><div class="youtube-container"><div class="youtube-player" data-id="$2"><img class="youtube-thumb autoLinkedImage" src="https://i.ytimg.com/vi/$2/hqdefault.jpg"><div class="play-button"></div></div></div>'
    ],
    [
        /(?:(?:http|https):\/\/)?((?:www\.)?(?:vimeo\.com)\/(.+))/g,
        '<a href="https://$1" target="_blank">$1</a><br /><iframe src="//player.vimeo.com/video/$2" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe><br />'
    ],
    [
        /(?:(?:http|https):\/\/)?((?:dailymotion\.com|dai\.ly)\/(.+))/g,
        '<a href="https://$1" target="_blank">$1</a><br /><iframe frameborder="0" width="560" height="315" src="https://www.dailymotion.com/embed/video/$2?logo=0&foreground=ffffff&highlight=1bb4c6&background=000000" allowfullscreen></iframe><br />',
    ]
];

function autoLinkFormat(match, link, protocol, www, domain, regexDotGroup, tld, port, filepath, getParams, fileExtension, endChar): string {
        const videoSearchLength = videoConversion.length;
        const videoSites = ["youtube", "youtu", "dailymotion", "vimeo"];
        let output = link + endChar;
        if (videoSites.indexOf(domain) > -1 && (typeof getParams !== "undefined" && getParams.length > 0 || domain === "youtu" && tld === ".be")) {
            for (let i = 0; i < videoSearchLength; i++) {
                output = output.replace(videoConversion[i][0], videoConversion[i][1]);
            }
        } else if (typeof fileExtension !== "undefined" && fileExtension.length > 0) {
            output = this.parseMediaLink(output);
        } else if (domain === "gyazo" && typeof filepath !== "undefined" && filepath.length === 33) {
            return `<a href="https://gyazo.com${filepath}">https://gyazo.com${filepath}</a><br><img class="autoLinkedImage" src="https://gyazo.com${filepath}.png"/>${endChar}`;
        } else if (domain === "puu" && tld === ".sh" && typeof filepath !== "undefined" && filepath.length === 17) {
            return `<a href="https://puu.sh${filepath}">https://gyazo.com${filepath}</a><br><img class="autoLinkedImage" src="https://puu.sh${filepath}.png"/>${endChar}`;
        } else {
            if (typeof protocol !== "undefined" && protocol.length > 0) {
                output = '<a href="' + link + '" target="_blank">' + link + "</a>" + endChar;
            } else {
                output = '<a href="http://' + link + '" target="_blank">' + link + "</a>" + endChar;
            }
        }

        return output;
}

function parseMediaLink(output: string, link: string, endChar: string) {
    const imageExpression = /((\b((https?|ftp|file):\/\/)?[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])\.(?:jpe?g|gif|png))/ig;
    const soundExpression = /((\b((https?|ftp|file):\/\/)?[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])\.(?:mp3|ogg|flac|wav))/ig;

    output = link.replace(imageExpression, function(url) {
        if (url.indexOf("https") === -1) {
            return `<a target="_blank" href="${url}">${url}</a><br><img class="autoLinkedImage" src="https://t.dark-gaming.com:3001/route/${encodeURIComponent(url)}"/>${endChar}`;
        } else {
            return `<a href="${url}">${url}</a><br><img class="autoLinkedImage" src="${url}"/>${endChar}`;
        }
    });
    output = output.replace(soundExpression, function(url) {
        if (url.indexOf("https") === -1) {
            return `<a target="_blank" href="${url}">${url}</a><br><audio controls><source src="https://t.dark-gaming.com:3001/route/${encodeURIComponent(url)}" /></audio>${endChar}`;
        } else {
            return `<a href="${url}">${url}</a><br><audio controls><source src="${url}"/></audio>${endChar}`;
        }
    });

    return output;
}

export default autoLinkFormat;
