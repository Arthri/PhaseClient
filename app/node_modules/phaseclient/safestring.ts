import CoreSafeString from "phasecore/safestring";

class SafeString extends CoreSafeString {
    constructor(content: string) {
        super(content);
    }

    public asIs(): string {
        return this.content;
    }

    public setContent(content: string): void {
        this.content = content;
    }

    public withoutBbcodeAndHtml(): string {
        return this.escapeHtml(this.withBbcodeStripped());
    }

    public withBbcodeStripped(): string {
        return this.stripBbcode(this.asIs());
    }

    /* Strips bbcode tags from the input string */
    public stripBbcode(text: string): string {
        const conversions = [
            // Slight problem with [url] conflict "/(?<!.)((http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?)/",
            [/\[notag\](\[)(.*?)\[\/notag\]/i, "$2"],
            [/\[b\](.*?)\[\/b\]/gi, "$1"],
            [/\[i\](.*?)\[\/i\]/gi, "$1"],
            [/\[u\](.*?)\[\/u\]/gi, "$1"],
            [/\[ul\](.*?)\[\/ul\]/gi, "$1"],
            [/\[li\](.*?)\[\/li\]/gi, "$1"],
            [/\[s\](.*?)\[\/s\]/, "$1"],
            [/\[img\](.*?)\[\/img\]/gi, "$1"],
            [/\[url=(.*?)\](.*?)\[\/url\]/gi, "$1"],
            [/\[url\](.*?)\[\/url\]/gi, "$1"],
            [/\[quote=(.*?)\](.*?)\[\/quote\]/gi, "$2"],
            [/\[center\](.*?)\[\/center\]/gi, "$1"],

            // ASCII
            [/&amp;#91;/gi, "["],

            // Emoticons
            [/\:\)/gi, ":)"],
            [/\:\(/gi, ":("],
            [/\&gt\;:D/gi, ">:D"],
            [/\:D/gi, ":D"],
            [/\:P/gi, ":P"],
            [/\;\)/gi, ";)"],
            [/\(evil\)/gi, "(evil)"],
            [/\(bash\)/gi, "(bash)"],
            [/\(poolparty\)/gi, "(poolparty)"],
            [/\(party\)/gi, "(party)"],
            [/\(hi\)/gi, "(hi)"],
            [/\(knuckles\)/gi, "(knuckles)"],
            [/\:O/gi, ":O"],
            [/\\\o\//gi, "\\o/"],
            [/\[#(.*?)\]/gi, "&#$1;"],
            [/\[color=(.*?)\](.*?)\[\/color\]/gi, "$2"],
            [/\[colour=(.*?)\](.*?)\[\/colour\]/gi, "$2"]
        ];

        for (const conversion of conversions) {
            const expression = conversion[0] as RegExp;
            const replacement = conversion[1] as string;
            text = text.replace(expression, replacement);
        }

        return text;
    }
}

export default SafeString;
