import CoreClient from "phaseclient/client";
import Config from "phaseclient/config";
import Discussion from "phaseclient/discussion";
import { BooleanHash } from "phaseclient/hash";
import Message from "phaseclient/message";
import SafeString from "phaseclient/safestring";
import User from "phaseclient/user";
import System from "phasecore/system";
import PageModel from "phasemini/pagemodel";

class Client extends CoreClient {
    protected _pageModel: PageModel;
    protected _initialDiscussionsReceived: boolean;

    constructor(configuration: Config) {
        super(configuration);
    }

    public setupPageModel(pageModel: PageModel): void {
        if (!this._pageModel) {
            this._pageModel = pageModel;
            this._pageModel.checkSession();
        }
    }

    public set username(username: string) {
        this._pageModel.updateUsername(username);
    }

    public get pageModel(): PageModel {
        return this._pageModel;
    }

    /* Updates the users avatar in the chat input area */
    public set avatar(avatar: string) {
        if (avatar.indexOf("/") === 0) {
            avatar = `https://t.dark-gaming.com:3001/${avatar}`;
        }
        this.pageModel.updateAvatar(this.avatar);
    }

    /* Adds a phase users information to the clients phase users object */
    public addPhaseUser(user: User): void {
        super.addPhaseUser(user);
        this.pageModel.updateUserAvatar(user);
    }

    protected onDiscussionListReceived(discussions: Discussion[]): void {
        this._initialDiscussionsReceived = true;
    }

    /* Appends a discussion to the clients list of discussions and updates page */
    public addDiscussion(discussion: Discussion): void {
        super.addDiscussion(discussion);
    }

    /**
     * Switches the current discussion
     *
     * @param discussionId The id of the discussion to switch to
     * @param eventElem The element that was clicked to cause this switch
     * @override
     */
    public switchDiscussion(discussionId: number): void {
        const discussion = this.discussions[discussionId];

        if (!discussion) {
            return;
        }

        if (typeof this._currentDiscussion !== "undefined") {
            this._currentDiscussion.ourLiveTypingMessage = this.pageModel.messageSection.getLastMessageInput();
        }

        super.switchDiscussion(discussionId);

        // If discussion has members, then the info for the discussion has been obtained already
        if (discussion.members.length > 0) {
            this.pageModel.messageSection.fadeOutMessages();
            this.completeDiscussionSwitch(discussion);
            this.pageModel.messageSection.fadeInMessages();
        } else {
            this.pageModel.messageSection.showMessageLoading();
        }
    }

    /**
     * When a chat message is to be displayed it will go through this function.
     * It must be decided whether the message is allowed to be displayed according
     * to the configuration.
     *
     * @param discussion The discussion the chat message has come from
     * @param message The message itself
     */
    public handleChatMessage(discussion: Discussion, message: Message): void {
        if (!this.configuration.useAndDisplayJoinLeaveMessages
            && message.userId === System.joinLeaveMessageUserId
            && message.tag.length > 0) {
            return;
        }

        const liveTypingExists = Object.keys(discussion.liveTypingMessages).length > 0;
        super.handleChatMessage(discussion, message);

        if (discussion.isBeingViewed) {
            const lastMessage: Message | undefined = discussion.messages.length > 1
                ? discussion.messages[discussion.messages.length - 2] as Message
                : undefined;
            this.pageModel.messageSection.displayMessage(lastMessage, message);
            this.pageModel.messageSection.removeLiveTyping(message.userId);
        } else {
            const content = message.content as SafeString;
            if (!this.pageModel.getWindowHasFocus()
                && (content.withBbcodeStripped().indexOf(this.username) > -1 || discussion.alertsEnabled)) {
                this.pageModel.showNotification(discussion, `${message.username.asIs()}: ${content.withBbcodeStripped()}`);
            }
        }
    }

    /**
     * Handles when the discussion messages requested were received or when the local messages were already there and need loading
     *
     * @param discussion The discussion that the messages received are in or the discussion with the local messages already
     */
    public completeDiscussionSwitch(discussion: Discussion): void {
        this.pageModel.messageSection.clearMessages();
        this.pageModel.messageSection.clearLiveTyping();
        this.pageModel.messageSection.displayMessages(discussion);
        this.pageModel.messageSection.displayLiveTyping(discussion);
        this.pageModel.messageSection.hideMessageLoading();
        this.pageModel.messageSection.updateOurChatColor();
    }

    /**
     * Handles when a user comes online
     *
     * @param user The user who has come online
     */
    public handleUserOnline(user: User): void {
        super.handleUserOnline(user);
    }

    /**
     * Handles when a user goes offline
     *
     * @param user The user who has gone offline
     */
    public handleUserOffline(user: User): void {
        super.handleUserOffline(user);
        this.pageModel.messageSection.removeLiveTyping(user.id);
    }

    /**
     * Handles when the list of users online are received
     *
     * @param userList The users who are online
     */
    public handleUsersOnline(userList: User[]): void {
        super.handleUsersOnline(userList);
    }

    /**
     * Handles when the discussion users list has been received
     *
     * @param discussion The discussion that the users are from
     * @param userList The list of users in the discussion
     * @param modList The moderators of that discussion
     */
    public handleDiscussionUsers(discussion: Discussion, userList: User[], modList: BooleanHash): void {
        super.handleDiscussionUsers(discussion, userList, modList);
    }

    /**
     * Handles when a new live typing message is received
     *
     * @param message The live typing message
     */
    public handleNewLiveTyping(discussion: Discussion, message: Message): void {
        if (discussion.isBeingViewed) {
            this.pageModel.messageSection.createLiveTyping(message);
        }
    }

    /**
     * Handles when an update to an existing live typing message is received
     *
     * @param message The live typing message
     */
    public handleUpdateLiveTyping(discussion: Discussion, message: Message): void {
        if (discussion.isBeingViewed) {
            this.pageModel.messageSection.updateLiveTyping(message);
        }
    }

    /**
     * Handles when a removal of an existing live typing message is received
     *
     * @param userId The user id of the live typing message to remove
     */
    public handleRemoveLiveTyping(discussion: Discussion, userId: number): void {
        if (discussion.isBeingViewed) {
            this.pageModel.messageSection.removeLiveTyping(userId);
        }
    }

    /**
     * Handles when a user joins a terraria server
     *
     * @param username The username of the person who joined a terraria server
     */
    public handleTerrariaJoin(username: string, tagColor: string): void {
        super.handleTerrariaJoin(username, tagColor);
        this.pageModel.messageSection.updateTerrariaUserStatus(username, true, tagColor);
    }

    /**
     * Handles when a user leaves a terraria server
     *
     * @param username The username of the person who left a terraria server
     */
    public handleTerrariaLeave(username: string): void {
        super.handleTerrariaLeave(username);
        this.pageModel.messageSection.updateTerrariaUserStatus(username, false);
    }

    /**
     * Handles when a user changes their name on a terraria server
     *
     * @param oldUsername The old name of the user
     * @param newUsername The new name of the user
     */
    public handleTerrariaChangeName(oldUsername: string, newUsername: string): void {
        super.handleTerrariaChangeName(oldUsername, newUsername);
    }
}

export default Client;
