import * as Combokeys from "combokeys";
import * as $ from "jquery";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";

class Shortcuts {
    private _combokeys: Combokeys.Combokeys;
    private _client: Client;

    constructor(client: Client) {
        this._combokeys = new Combokeys(document.documentElement);
        this._client = client;

        this.bindDiscussionSwitch();
        this.bindChatFocus();
        this.bindChatDefocus();
    }

    /**
     * Prevents shortcut for chat input unless esc
     */
    private preventShortcutInput(): void {
        this._combokeys.stopCallback = function(e, element, combo) {
            const chatInput = $(ElementIdentifiers.ChatInput.textInput);

            return chatInput.length > 0 && chatInput.is(":focus") && combo !== "esc";
        };
    }

    /**
     * Adds shortcuts for switching discussions
     */
    private bindDiscussionSwitch(): void {
        this._combokeys.bind("s t", () => {
            const topDiscussion = $(ElementIdentifiers.DiscussionSection.list).children().first();

            if (topDiscussion.length) {
                this._client.switchDiscussion(+topDiscussion.attr("id").substr(4));
            }
        });

        this._combokeys.bind("s u", () => {
            const nextUnreadDiscussion = $(ElementIdentifiers.DiscussionSection.unread).first();

            if (nextUnreadDiscussion.length) {
                this._client.switchDiscussion(+nextUnreadDiscussion.attr("id").substr(4));
            }
        });

        this._combokeys.bind("s n", () => {
            const nextDiscussion = $(ElementIdentifiers.DiscussionSection.selected).next();

            if (nextDiscussion.length) {
                this._client.switchDiscussion(+nextDiscussion.attr("id").substr(4));
            }
        });

        this._combokeys.bind("s p", () => {
            const previousDiscussion = $(ElementIdentifiers.DiscussionSection.selected).prev();

            if (previousDiscussion.length) {
                this._client.switchDiscussion(+previousDiscussion.attr("id").substr(4));
            }
        });

        this.bindDiscussionSwitchOffset();
    }

    /**
     * Binds shortcuts for switching to nth discussion in list
     */
    private bindDiscussionSwitchOffset(): void {
        for (let i = 1; i <= 9; i++) {
            this._combokeys.bind(`s ${i}`, () => {
                const discussion = $(ElementIdentifiers.DiscussionSection.list).children().eq(i - 1);

                if (discussion.length) {
                    this._client.switchDiscussion(+discussion.attr("id").substr(4));
                }
            });
        }
    }

    /**
     * Adds shortcut for focusing chat
     */
    private bindChatFocus(): void {
        this._combokeys.bind("c", (e) => {
            if (!$(ElementIdentifiers.ChatInput.textInput).is(":focus")) {
                const chatInput = $(ElementIdentifiers.ChatInput.textInput);

                if (chatInput.length) {
                    chatInput.focus();
                }

                e.preventDefault();
            }
        });
    }

    /**
     * Adds shortcut for defocusing chat
     */
    private bindChatDefocus(): void {
        this._combokeys.bind("esc", (e) => {
            const chatInput = $(ElementIdentifiers.ChatInput.textInput);

            if (chatInput.length) {
                chatInput.blur();
            }

            e.preventDefault();
        });
    }
}

export default Shortcuts;
