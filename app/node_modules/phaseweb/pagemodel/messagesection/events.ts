import * as $ from "jquery";
import Discussion from "phaseclient/discussion";
import TextDifference from "phaseclient/textdifference";
import { EditQueueEntry } from "phasecore/editqueue";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import MessageSection from "phaseweb/pagemodel/messagesection";
import Translator from "phaseweb/translator";

class MessageSectionEvents {
    private _messageSection: MessageSection;
    private _client: Client;
    private _translator: Translator = new Translator();

    constructor(messageSection: MessageSection, client: Client) {
        this._messageSection = messageSection;
        this._client = client;
        this.registerEvents();
    }

    private registerEvents(): void {
        this.registerPageClick();
        this.registerMessageSend();
        this.registerTextInput();
        this.registerVideoThumbnailClick();
        this.registerMessageContextMenu();
        this.registerContextMenuItemClick();
        this.registerAlertBellClick();
        this.registerScroll();
        this.registerSearchIconClick();
        this.registerSearchSubmit();
        this.registerTitleClick();
    }

    /**
     * Clears the context menu when the page is clicked
     */
    private registerPageClick(): void {
        $("body").on("click", () => {
            this._messageSection.hideContextMenu();
        });
    }

    /**
     * Tells the client to take the necessary steps to send the message
     */
    private handleMessageSend(context: any): void {
        const chatText = $(context).val();
        this._client.sendChatMessage(chatText);
        $(context).val("");
        this._messageSection.lastMessageInput = "";
    }

    /**
     * Registers the submit event of the chat message form for sending a message
     */
    private registerMessageSend(): void {
        const self = this;
        $(ElementIdentifiers.ChatInput.textInput).on("keydown", function(event) {
            if (event.keyCode === 13 && !event.shiftKey) {
                if ($(this).val().length > 0) {
                    const scrollIsAtBottom = self._messageSection.getScrollIsAtBottom();
                    self.handleMessageSend(this);
                    $(this).text("");
                    this.style.height = "0px";
                    this.style.height = (this.scrollHeight) + "px";
                    self._messageSection.moveChatInputToBottom();
                    event.preventDefault();

                    if (scrollIsAtBottom) {
                        self._messageSection.scrollToBottom();
                    }
                }
            }
        });
    }

    private registerTextInput(): void {
        const self = this;
        $(ElementIdentifiers.ChatInput.textInput).on("input", function(event) {
            const scrollIsAtBottom = self._messageSection.getScrollIsAtBottom();
            const currentMessage = $(this).val();

            if (currentMessage.length === 0) {
                self._messageSection.moveChatInputToBottom();
            } else if (self._messageSection.lastMessageInput.length === 0) {
                if (self._client.getConfiguration().mergeLiveTypingWithCompleteChatArea) {
                    self._messageSection.moveChatInputToMessageList();
                }
            }

            let queue: EditQueueEntry[] | null = null;
            if (currentMessage.indexOf("/") === 0) {
                if (!self._messageSection.messageInputHadCommandPrefix) {
                    queue = TextDifference.getEditQueue(self._messageSection.lastMessageInput, "");
                }
            } else {
                if (self._messageSection.messageInputHadCommandPrefix) {
                    self._messageSection.messageInputHadCommandPrefix = false;
                    self._messageSection.lastMessageInput = "";
                }

                queue = TextDifference.getEditQueue(self._messageSection.lastMessageInput, currentMessage);
            }

            self._messageSection.lastMessageInput = currentMessage;

            if (queue !== null) {
                self._client.sendEditQueue(queue);
            }
            this.style.height = "0px";
            this.style.height = (this.scrollHeight) + "px";

            if (scrollIsAtBottom) {
                self._messageSection.scrollToBottom();
            }
        });
    }

    private registerVideoThumbnailClick(): void {
        const self = this;
        $(ElementIdentifiers.ChatSection.list).on("click", ElementIdentifiers.ChatSection.youtubePlayer, function() {
            self._messageSection.displayYoutubeVideo($(this));
        });
    }

    /**
     * Binds the context menu appearing to right clicking a message entry
     */
    private registerMessageContextMenu(): void {
        const self = this;

        $(`${ElementIdentifiers.ChatSection.list}`).on("contextmenu", "li", function(e) {
            const selection = window.getSelection().toString();
            if (!$(this).hasClass("in-progress") && selection.length === 0) {
                e.preventDefault();
                $(ElementIdentifiers.ChatSection.contextMenu)
                    .offset({
                        left: e.pageX,
                        top: e.pageY
                    });

                self._messageSection.contextMenuMessageId = parseInt($(this).attr("id"));
            }
        });
    }

    /**
     * Translates text when the context menu is clicked
     */
    private registerContextMenuItemClick(): void {
        $("body").on("click", ElementIdentifiers.ChatSection.contextMenu, (event) => {
            const element = $(`#${this._messageSection.contextMenuMessageId}`).find(ElementIdentifiers.Message.content);
            const firstLine = element.contents().first().text();
            const otherLines = $.map(element.children(), function(elem) {
                return $(elem).text();
            }).join("\n");

            const messageId = this._messageSection.contextMenuMessageId;
            this._translator.translate(firstLine + "\n" + otherLines, "en")
                .then((translatedMessage: string) => {
                    $(`#${messageId}`).find(ElementIdentifiers.Message.content).text(translatedMessage);
                })
                .catch((e: Error) => {
                    console.log(e);
                });
        });
    }

    private registerAlertBellClick(): void {
        $(ElementIdentifiers.ChatSection.alertBell).on("click", () => {
            const currentDiscussion = this._client.getCurrentDiscussion();

            if (typeof currentDiscussion !== "undefined") {
                this._client.toggleAlertsEnabled(currentDiscussion);
                this._messageSection.updateAlertBellStatus(currentDiscussion.getHasAlertsEnabled());
            }
        });
    }

    private registerScroll(): void {
        $(ElementIdentifiers.ChatSection.scrollSection).on("scroll", (e) => {
            if (typeof this._client.getCurrentDiscussion() === "undefined") {
                return;
            }

            const chatElement = $(ElementIdentifiers.ChatSection.scrollSection);
            const currentScroll = chatElement[0].scrollTop;

            if (currentScroll <= 400) {
                const discussion = this._client.getCurrentDiscussion() as Discussion;
                const messages = discussion.getMessages();
                if (messages.length > 40 && this._messageSection.displayedMessagesCount !== messages.length) {
                    this._messageSection.displayOlderMessages();
                } else if (messages.length >= 40) {
                    this._client.requestDiscussionHistory(discussion);
                }
            }
        });
    }

    private registerSearchIconClick(): void {
        const searchInput = $(ElementIdentifiers.ChatSection.messageSearchInput);
        $(ElementIdentifiers.ChatSection.messageSearch).on("click", () => {
            if (searchInput.css("display") !== "block") {
                searchInput.css("display", "block");
                searchInput.val("");
            }
            searchInput.focus();
        });

        $("body").on("click", (e) => {
            if ($(e.target).attr("id") !== ElementIdentifiers.ChatSection.messageSearchInput.substr(1)
                && $(e.target).attr("id") !== ElementIdentifiers.ChatSection.messageSearch.substr(1)) {
                searchInput.css("display", "none");
            }
        });
    }

    private registerSearchSubmit(): void {
        const searchForm = $(ElementIdentifiers.ChatSection.messageSearchForm);
        const searchInput = $(ElementIdentifiers.ChatSection.messageSearchInput);
        searchForm.submit((e) => {
            e.preventDefault();
            this._client.requestMessageSearch(searchInput.val());
        });
    }

    private registerTitleClick(): void {
        const title = $(ElementIdentifiers.ChatSection.title);
        title.on("click", () => {
            // Doesn't already have an input field
            if (title.children().length === 0) {
                const currentTitle = title.text();
                title.html(`<input type="text"/>`);
                const input = title.children().first();
                input.attr("value", currentTitle);
                input.focus();

                const inputHtmlElem = input.get(0) as HTMLInputElement | any;
                if (inputHtmlElem.setSelectionRange) {
                    inputHtmlElem.focus();
                    inputHtmlElem.setSelectionRange(currentTitle.length, currentTitle.length);
                } else if (inputHtmlElem.createTextRange) {
                    const range = inputHtmlElem.createTextRange();
                    range.collapse(true);
                    range.moveEnd("character", currentTitle.length);
                    range.moveStart("character", currentTitle.length);
                    range.select();
                }
            }
        });

        $("body").on("click", (e) => {
            if ($(e.target).parents(ElementIdentifiers.ChatSection.title).length === 0
                && $(e.target).attr("id") !== ElementIdentifiers.ChatSection.title.substr(1)) {
                if (title.children.length > 0) {
                    const currentTitle = title.children().first().attr("value");
                    title.text(currentTitle);
                }
            }
        });
    }
}

export default MessageSectionEvents;
