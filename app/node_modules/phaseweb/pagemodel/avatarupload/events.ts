import * as $ from "jquery";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";

class AvatarFormEvents {
    private _client: Client;

    constructor(client: Client) {
        this._client = client;
        this.registerEvents();
    }

    private registerEvents(): void {
        this.registerAvatarEntryClick();
        this.registerAvatarFormSubmit();
    }

    /**
     * Registers the click on the avatar button to open the avatar change form
     */
    private registerAvatarEntryClick(): void {
        const form = $(ElementIdentifiers.NavigationBar.avatarForm);
        $(ElementIdentifiers.NavigationBar.avatarEntry).on("click", (e) => {
            form.css("display", "block");
            $(ElementIdentifiers.tint).show();
            e.stopPropagation();
        });

        $("body").on("click", (e) => {
            if (!form.is(e.target) && form.has(e.target).length === 0) {
                form.css("display", "none");
                $(ElementIdentifiers.tint).hide();
            }
        });
    }

    /**
     * Registers the submission of the avatar form
     */
    private registerAvatarFormSubmit(): void {
        $(`${ElementIdentifiers.NavigationBar.avatarForm} form`).on("submit", (e) => {
            e.preventDefault();

            $(ElementIdentifiers.tint).hide();
            $(ElementIdentifiers.NavigationBar.avatarFormStatus).text("Uploading...");
            const avatarFile = $("#userPhoto")[0] as HTMLInputElement;
            const data = new FormData();
            $.each(avatarFile.files as FileList, (i, file) => {
                data.append("userPhoto", file);
            });

            $.ajax({
                url: `https://t.dark-gaming.com:3001/api/avatar/${encodeURIComponent(this._client.session)}`,
                type: "POST",
                data,
                cache: false,
                contentType: false,
                processData: false,
                success: (response) => {
                    $(ElementIdentifiers.NavigationBar.avatarForm).css("display", "none");
                    $(ElementIdentifiers.NavigationBar.avatarFormStatus).text("");
                },
                error: () => {
                    $(ElementIdentifiers.NavigationBar.avatarForm).css("display", "none");
                    $(ElementIdentifiers.NavigationBar.avatarFormStatus).text("");
                }
              });
        });
    }
}

export default AvatarFormEvents;
