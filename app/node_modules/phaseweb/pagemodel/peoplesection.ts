import Client from 'phaseweb/client';
import User from 'phaseclient/user';
import ElementIdentifiers from 'phaseweb/elementidentifiers';
import Templates from 'phaseweb/templates';
import * as $ from 'jquery';
import { ScrollElement } from 'phaseweb/scroller';
import Scroller from 'phaseweb/scroller';
import UserStatus from 'phasecore/userstatus';

class PeopleSection {
    private _client: Client;
    private discussionUsersScroller: Scroller;

    constructor(client: Client) {
        this._client = client;
    }

    /**
     * Clears the existing displayed list and puts in an updated one
     */
    public refreshUsersOnlineList(): void {
        let sectionList = $(ElementIdentifiers.PeopleSection.phaseUsers).children(ElementIdentifiers.PeopleSection.list).children('ul');
        sectionList.html('');

        let onlineUsers = this._client.getOnlineUsers();
        onlineUsers.sort((a, b): number => {
            if (a.getLowerCaseName() > b.getLowerCaseName()) {
                return 1;
            } else {
                return -1;
            }
        });

        
        let user: User;
        for (let i = 0; i < onlineUsers.length; i++) {
            user = onlineUsers[i];
            sectionList.append(new Templates.PeopleEntry(user, null).getContent());
        }

        $(ElementIdentifiers.PeopleSection.onlineUsersCount).text(onlineUsers.length);
    }

    /**
     * Updates the discussion users list
     * 
     * @param resetScrollTop Whether to put the scroll bar back to the top
     */
    public updateDiscussionUsersList(resetScrollTop = false): void {
        let currentDiscussion = this._client.getCurrentDiscussion();
        if (currentDiscussion !== undefined) {
            let onlineUserElements: ScrollElement[] = [];
            let offlineUserElements: ScrollElement[] = [];
            let members = <User[]>currentDiscussion.getMembers();
            let onlineUsers = 0;

            members.sort((a, b): number => {
                if (a.getLowerCaseName() > b.getLowerCaseName()) {
                    return 1;
                } else {
                    return -1;
                }
            });

            // seperate users into online/offline lists
            for (let i = 0; i < members.length; i++) {
                if (members[i].getStatus() === UserStatus.Online) {
                    onlineUserElements.push({
                        element: new Templates.PeopleEntry(<User>members[i], currentDiscussion),
                        instance: <User>members[i]
                    });
                    onlineUsers++;
                } else {
                    offlineUserElements.push({
                        element: new Templates.PeopleEntry(<User>members[i], currentDiscussion),
                        instance: members[i]
                    });
                }
            }


            this.discussionUsersScroller.setElements(onlineUserElements.concat(offlineUserElements));

            $(ElementIdentifiers.PeopleSection.discussionUsersCount).text(`${onlineUsers} / ${members.length}`);
            
            if (resetScrollTop) {
                this.discussionUsersScroller.elementScroller[0].scrollTop = 0;
            }

        }
    }

    public setupScrollers(): void {
        this.setupDiscussionUsersScroller();
    }

    private setupDiscussionUsersScroller(): void {
        let discussionUsersSection = $(ElementIdentifiers.PeopleSection.discussionUsers);
        let discussionUsersScroller = discussionUsersSection.find(ElementIdentifiers.PeopleSection.list).first();
        let discussionUsersList = discussionUsersSection.find(ElementIdentifiers.PeopleSection.list).first().find('ul').first();
        this.discussionUsersScroller = new Scroller(discussionUsersList, discussionUsersScroller, [], 25, 80);
        this.hookDiscusionUsersScroll();
    }

    private hookDiscusionUsersScroll(): void {
        $(this.discussionUsersScroller).on('scroll', () => {
            this.discussionUsersScroller.onScroll();
        });
    }

    /**
     * Registers the events for the people section
     */
    public registerEvents(): void {
        this.registerUsersBodyClick();
        this.registerUsersInDiscussionClick();
        this.registerPhaseUsersOnlineClick();
    }

    /**
     * Prevents drop down from closing when the body of it is clicked
     */
    private registerUsersBodyClick(): void {
        $(ElementIdentifiers.PeopleSection.list).on('mousedown', (e) => {
            e.stopPropagation();
        });
    }

    /**
     * Registers the click event on the discussion users drop down
     */
    private registerUsersInDiscussionClick(): void {
        $(ElementIdentifiers.PeopleSection.discussionUsers).on('mousedown', function() {
            let list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css('display') === "none") {
                list.css('display', 'block');
            } else {
                list.css('display', 'none');
            }
        });
    }

    /**
     * Registers the click event on the phase users drop down
     */
    private registerPhaseUsersOnlineClick(): void {
        $(ElementIdentifiers.PeopleSection.phaseUsers).on('mousedown', function() {
            let list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css('display') === "none") {
                list.css('display', 'block');
            } else {
                list.css('display', 'none');
            }
        });
    }
}

export default PeopleSection;