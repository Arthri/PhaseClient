import * as $ from "jquery";
import Discussion from "phaseclient/discussion";
import SafeString from "phaseclient/safestring";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import DiscussionSectionEvents from "phaseweb/pagemodel/discussionsection/events";
import { ScrollElement } from "phaseweb/scroller";
import Scroller from "phaseweb/scroller";
import Templates from "phaseweb/templates";
import DiscussionPreview from "phaseweb/templates/discussionpreview";

class DiscussionSection {
    private _discusionListScroller: Scroller;
    private _client: Client;
    private _liveTypingBarTimeouts: { [discussionId: number]: any };
    private _events: DiscussionSectionEvents;

    constructor(client: Client) {
        this._client = client;
        this._liveTypingBarTimeouts = {};
    }

    /**
     * Registers the events for the discussion section
     */
    public registerEvents(): void {
        this._events = new DiscussionSectionEvents(this, this._client);
    }

    /**
     * Adds a discussion to the top of the discussions list
     *
     * @param discussion The discussion to add to the discussion list
     */
    public prependDiscussionsList(discussion: Discussion): void {
        this._discusionListScroller.prependElement({
            element: new Templates.DiscussionListEntry(this._client, discussion),
            instance: discussion
        });
    }

    /**
     * Puts in a starting list of discussions in the display
     *
     * @param discussions The list of discussions to put in the display
     */
    public setDiscussionsList(discussions: Discussion[]): void {
        const elements: ScrollElement[] = [];
        for (const discussion of discussions) {
            elements.unshift({
                element: new Templates.DiscussionListEntry(this._client, discussion),
                instance: discussion
            });
        }

        this._discusionListScroller.setElements(elements);
    }

    /**
     * Moves a discussion to the top of the displayed list
     *
     * @param discussion The discussion to move to the top of the list
     */
    public moveDiscussionToTopOfList(discussion: Discussion): void {
        this._discusionListScroller.moveElementToFront(discussion, `#disc${discussion.getId()}`);
        this._discusionListScroller.onScroll();
    }

    /**
     * Updates the selected class to the newly switched discussion
     *
     * @param elem The element that was clicked to switch discussion
     */
    public switchSelectedDiscussion(discussionId: number): void {
        $(ElementIdentifiers.DiscussionSection.selected).removeClass(ElementIdentifiers.DiscussionSection.selected.substr(1));
        $(ElementIdentifiers.DiscussionSection.identifier(discussionId)).addClass(ElementIdentifiers.DiscussionSection.selected.substr(1));
    }

    /**
     * Remove unread style to discussion div
     */
    public setDiscussionRead(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .removeClass("unread");
    }

    /**
     * Apply unread style to discussion div
     *
     * @param discussion The discussion to set as unread
     */
    public setDiscussionUnread(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .addClass("unread");
    }

    /**
     * Update the preview of the discussion div in the discussion list
     *
     * @param discussion The discussion to update preview for
     */
    public updateDiscussionEntryMessagePreview(discussion: Discussion): void {
        const messageContent = discussion.getRecentMessage().getContent() as SafeString;
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .children(ElementIdentifiers.DiscussionSection.preview)
            .html(DiscussionPreview(this._client, discussion, discussion.getRecentMessage()));
    }

    /**
     * Ensures the live typing display bar is active for a discussion in the list
     *
     * @param discussion The discussion to update the bar for
     */
    public updateDiscussionLiveTypingBar(discussion: Discussion): void {
        const discussionElement = $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()));
        const unreadInprogressClass = ElementIdentifiers.DiscussionSection.unreadInprogress.substr(1);
        if (!discussionElement.hasClass(unreadInprogressClass)) {
            discussionElement.addClass(unreadInprogressClass);
        }

        if (this._liveTypingBarTimeouts[discussion.getId()]) {
            clearTimeout(this._liveTypingBarTimeouts[discussion.getId()]);
        }

        this.setLiveTypingBarTimeout(discussion);
    }

    /**
     * Ensures the live typing display bar is inactive for a discussion in the list
     *
     * @param discussion The discussion to remove the bar for
     */
    public removeDiscussionLiveTypingBar(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .removeClass(ElementIdentifiers.DiscussionSection.unreadInprogress.substr(1));

        // Clear existing timeout
        if (this._liveTypingBarTimeouts[discussion.getId()]) {
            clearTimeout(this._liveTypingBarTimeouts[discussion.getId()]);
        }
    }

    /**
     * Sets a timeout for the display of the live typing bar
     *
     * @param discussion The discussion to set the timeout for
     */
    private setLiveTypingBarTimeout(discussion: Discussion): void {
        this._liveTypingBarTimeouts[discussion.getId()] = setTimeout(() => {
            this.removeDiscussionLiveTypingBar(discussion);
        }, 1000);
    }

    /**
     * Updates the scroller by forcing a redraw
     */
    public updateScroller(): void {
        this._discusionListScroller.onScroll();
    }

    /**
     * Sets up the discussion list scroller with default values and adds the scroll event handler
     */
    public setupScroller(): void {
        this._discusionListScroller = new Scroller($(ElementIdentifiers.DiscussionSection.list),
            $(ElementIdentifiers.DiscussionSection.list),
            [],
            70);
        $(ElementIdentifiers.DiscussionSection.list).on("scroll", () => {
            this._discusionListScroller.onScroll();
        });
    }
}

export default DiscussionSection;
