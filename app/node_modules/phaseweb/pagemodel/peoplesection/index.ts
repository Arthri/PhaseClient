import * as $ from "jquery";
import User from "phaseclient/user";
import SearchUserResults from "phasecore/messagetypes/searchuserresults";
import UserStatus from "phasecore/userstatus";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import PeopleSectionEvents from "phaseweb/pagemodel/peoplesection/events";
import { ScrollElement } from "phaseweb/scroller";
import Scroller from "phaseweb/scroller";
import Templates from "phaseweb/templates";

class PeopleSection {
    private _client: Client;
    private _discussionUsersScroller: Scroller;
    private _events: PeopleSectionEvents;

    constructor(client: Client) {
        this._client = client;
    }

    /**
     * Registers the events for the people section
     */
    public registerEvents(): void {
        this._events = new PeopleSectionEvents(this, this._client);
    }

    /**
     * Clears the existing displayed list and puts in an updated one
     */
    public refreshUsersOnlineList(): void {
        const sectionList = $(ElementIdentifiers.PeopleSection.phaseUsers).children(ElementIdentifiers.PeopleSection.list).children("ul");
        sectionList.html("");

        const onlineUsers = this._client.onlineUsers;
        onlineUsers.sort((a, b): number => {
            if (a.lowerCaseName > b.lowerCaseName) {
                return 1;
            } else {
                return -1;
            }
        });

        let user: User;
        for (let i = 0; i < onlineUsers.length; i++) {
            user = onlineUsers[i];
            sectionList.append(new Templates.PeopleEntry(this._client, user, null).getContent());
        }

        $(ElementIdentifiers.PeopleSection.onlineUsersCount).text(onlineUsers.length);
    }

    /**
     * Updates the discussion users list
     *
     * @param resetScrollTop Whether to put the scroll bar back to the top
     */
    public updateDiscussionUsersList(resetScrollTop = false): void {
        const currentDiscussion = this._client.currentDiscussion;
        if (currentDiscussion !== undefined) {
            const onlineUserElements: ScrollElement[] = [];
            const offlineUserElements: ScrollElement[] = [];
            const members = currentDiscussion.members as User[];
            let onlineUsers = 0;

            members.sort((a, b): number => {
                if (a.lowerCaseName > b.lowerCaseName) {
                    return 1;
                } else {
                    return -1;
                }
            });

            // seperate users into online/offline lists
            for (const member of members) {
                if (member.status === UserStatus.Online) {
                    onlineUserElements.push({
                        element: new Templates.PeopleEntry(this._client, member as User, currentDiscussion),
                        instance: member as User
                    });
                    onlineUsers++;
                } else {
                    offlineUserElements.push({
                        element: new Templates.PeopleEntry(this._client, member as User, currentDiscussion),
                        instance: member
                    });
                }
            }

            this._discussionUsersScroller.elements = onlineUserElements.concat(offlineUserElements);

            $(ElementIdentifiers.PeopleSection.discussionUsersCount).text(`${onlineUsers} / ${members.length}`);

            if (resetScrollTop) {
                this._discussionUsersScroller.scrollTop = 0;
            }

        }
    }

    public setupScrollers(): void {
        this.setupDiscussionUsersScroller();
    }

    private setupDiscussionUsersScroller(): void {
        const discussionUsersSection = $(ElementIdentifiers.PeopleSection.discussionUsers);
        const discussionUsersScroller = discussionUsersSection.find(ElementIdentifiers.PeopleSection.list).first();
        const discussionUsersList = discussionUsersSection.find(ElementIdentifiers.PeopleSection.list).first().find("ul").first();
        this._discussionUsersScroller = new Scroller(discussionUsersList, discussionUsersScroller, [], 25, 80);
        this.hookDiscusionUsersScroll(discussionUsersScroller);
    }

    private hookDiscusionUsersScroll(element: JQuery): void {
        element.on("scroll", () => {
            this._discussionUsersScroller.onScroll();
        });
    }

    /**
     * Displays the latest user search results
     *
     * @param searchUserResults The search results
     */
    public handleSearchUserResults(searchUserResults: SearchUserResults): void {
        const resultList = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults);
        if (resultList.length > 0) {
            resultList.children().remove();

            let count = 0;
            for (const result of searchUserResults.results.reverse()) {
                if (++count <= 5) {
                    resultList.append(Templates.SearchUserResult(this._client.systemName, result.Username, result.SystemName, result.Avatar));
                }
            }
        }
    }
}

export default PeopleSection;
