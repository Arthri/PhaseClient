import $ from "jquery";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import PeopleSection from "phaseweb/pagemodel/peoplesection";
import Templates from "phaseweb/templates";

class PeopleSectionEvents {
    private _peopleSection: PeopleSection;
    private _client: Client;

    constructor(peopleSection: PeopleSection, client: Client) {
        this._peopleSection = peopleSection;
        this._client = client;
        this.registerEvents();
    }

    /**
     * Registers the events for the people section
     */
    private registerEvents(): void {
        this.registerUsersBodyClick();
        this.registerUsersInDiscussionClick();
        this.registerPhaseUsersOnlineClick();
        this.registerInGameUsersOnlineClick();
        this.registerAddDiscussionUserClick();
        this.registerLeaveDiscussionClick();
        this.registerRemoveUserDiscussionClick();
        this.registerPromoteUserDiscussionClick();
        this.registerDemoteUserDiscussionClick();
    }

    /**
     * Prevents drop down from closing when the body of it is clicked
     */
    private registerUsersBodyClick(): void {
        $(ElementIdentifiers.PeopleSection.list).on("mousedown", (e) => {
            e.stopPropagation();
        });
    }

    /**
     * Registers the click event on the discussion users drop down
     */
    private registerUsersInDiscussionClick(): void {
        $(ElementIdentifiers.PeopleSection.discussionUsers).on("mousedown", function() {
            const list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css("display") === "none") {
                list.css("display", "block");
            } else {
                list.css("display", "none");
            }
        });
    }

    /**
     * Registers the click event on the phase users drop down
     */
    private registerPhaseUsersOnlineClick(): void {
        $(ElementIdentifiers.PeopleSection.phaseUsers).on("mousedown", function() {
            const list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css("display") === "none") {
                list.css("display", "block");
            } else {
                list.css("display", "none");
            }
        });
    }

    /**
     * Registers the click event on the phase in-game users drop down
     */
    private registerInGameUsersOnlineClick(): void {
        $(ElementIdentifiers.PeopleSection.terrariaUsers).on("mousedown", function() {
            const list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css("display") === "none") {
                list.css("display", "block");
            } else {
                list.css("display", "none");
            }
        });
    }

    /**
     * Registers the click event on the discussion user add icon
     */
    private registerAddDiscussionUserClick(): void {
        $(ElementIdentifiers.PeopleSection.addDiscussionUser).on("mousedown", (e) => {
            e.stopImmediatePropagation();
            const form = $(Templates.AddDiscussionUser());
            $(ElementIdentifiers.PeopleSection.addDiscussionUserForm).remove();
            $(ElementIdentifiers.PeopleSection.discussionUsers).children(ElementIdentifiers.PeopleSection.list).prepend(form);
            $(ElementIdentifiers.PeopleSection.discussionUsers).children(ElementIdentifiers.PeopleSection.list).css("display", "block");

            const input = form.find("input").first();
            input.on("keydown", (event) => {
                if (event.keyCode === 13) {
                    this.submitAddDiscussionUser(form, input);
                } else if (event.keyCode === 38) {
                    this.navigateUpResultList(input, event);
                } else if (event.keyCode === 40) {
                    this.navigateDownResultList(input, event);
                }
            }).on("input", () => {
                this._client.requestSearchUser(input.val().split("@")[0]);
                const entry = $(ElementIdentifiers.PeopleSection.addDiscussionUserEntry);
                entry.find("img").attr("src", "https://dark-gaming.com/img/default.png");
            });

            const self = this;
            $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).on("click", ElementIdentifiers.PeopleSection.searchResult, (event) => {
                $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).children(".selected").removeClass("selected");
                if ($(event.target).hasClass(ElementIdentifiers.PeopleSection.searchResult.substr(1))) {
                    $(event.target).addClass("selected");
                } else {
                    $(event.target).parents(ElementIdentifiers.PeopleSection.searchResult).addClass("selected");
                }

                self.submitAddDiscussionUser(form, input);
            });
        });

        // Must be done on mouseup as not possible to focus on mousedown
        $(ElementIdentifiers.PeopleSection.addDiscussionUser).on("mouseup", (e) => {
            $(ElementIdentifiers.PeopleSection.addDiscussionUserInput).focus();
        });

        $("body").on("mousedown", (e) => {
            if ($(e.target).attr("id") !== ElementIdentifiers.PeopleSection.addDiscussionUserForm.substr(1)
                || $(e.target).parents(ElementIdentifiers.PeopleSection.addDiscussionUserForm).length === 0) {
                $(ElementIdentifiers.PeopleSection.addDiscussionUserForm).remove();
            }
        });
    }

    private submitAddDiscussionUser(form: JQuery, input: JQuery): void {
        const autocompleteElem = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults)
            .find(".selected")
            .first()
            .children(ElementIdentifiers.PeopleSection.searchResultName);
        const name = autocompleteElem.text().trim() || input.val();
        const username = name.split("@")[0];
        const systemName = name.split("@")[1];
        this._client.addDiscussionUser(username, systemName || "");
        form.remove();
    }

    private navigateUpResultList(input: JQuery, event: JQueryEventObject): void {
        let currentSelection = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).children(".selected");
        if (currentSelection.length === 0) {
            currentSelection = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).children().first().addClass("selected");
        } else {
            currentSelection = currentSelection.first().removeClass("selected").prev().addClass("selected");
        }

        this.updateAddDiscussionUserEntry(input, currentSelection);
        event.preventDefault();
    }

    private navigateDownResultList(input: JQuery, event: JQueryEventObject): void {
        let currentSelection = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).children(".selected");
        if (currentSelection.length === 0) {
            currentSelection = $(ElementIdentifiers.PeopleSection.addDiscussionUserSearchResults).children().first().addClass("selected");
        } else {
            currentSelection = currentSelection.first().removeClass("selected").next().addClass("selected");
        }

        this.updateAddDiscussionUserEntry(input, currentSelection);
        event.preventDefault();
    }

    private updateAddDiscussionUserEntry(input: JQuery, currentSelection: JQuery): void {
        const entry = $(ElementIdentifiers.PeopleSection.addDiscussionUserEntry);
        entry.find("img").attr("src", currentSelection.find("img").attr("src"));
        input.val(currentSelection.find(ElementIdentifiers.PeopleSection.searchResultName).text().trim());
    }

    /**
     * Registers the click of the leave discussion icon
     */
    private registerLeaveDiscussionClick(): void {
        $("body").on("click", ElementIdentifiers.PeopleSection.discussionUserLeave, () => {
            this._client.leaveCurrentDiscussion();
        });
    }

    /**
     * Registers the click of the remove user icon
     */
    private registerRemoveUserDiscussionClick(): void {
        $("body").on("click", ElementIdentifiers.PeopleSection.discussionUserRemove, (e) => {
            const usernameElement = $(e.target).parents("li").first().find(ElementIdentifiers.PeopleSection.peopleUsername);
            const name = usernameElement.text();
            const username = name.split("@")[0];
            const systemName = name.split("@")[1] || this._client.systemName;
            usernameElement.parents("li").first().addClass(ElementIdentifiers.PeopleSection.peopleUserBeingRemoved.substr(1));
            this._client.removeUserFromCurrentDiscussion(username, systemName);
        });
    }

    /**
     * Registers the click of the promote user icon
     */
    private registerPromoteUserDiscussionClick(): void {
        $("body").on("click", ElementIdentifiers.PeopleSection.modPromoteIcon, (e) => {
            const usernameElement = $(e.target).parents("li").first().find(ElementIdentifiers.PeopleSection.peopleUsername);
            const name = usernameElement.text();
            const username = name.split("@")[0];
            const systemName = name.split("@")[1] || this._client.systemName;
            this._client.promoteUserInCurrentDiscussion(username, systemName);
        });
    }

    /**
     * Registeres the click of the demote user icon
     */
    private registerDemoteUserDiscussionClick(): void {
        $("body").on("click", ElementIdentifiers.PeopleSection.modDemoteIcon, (e) => {
            const usernameElement = $(e.target).parents("li").first().find(ElementIdentifiers.PeopleSection.peopleUsername);
            const name = usernameElement.text();
            const username = name.split("@")[0];
            const systemName = name.split("@")[1] || this._client.systemName;
            this._client.demoteUserInCurrentDiscussion(username, systemName);
        });
    }
}

export default PeopleSectionEvents;
