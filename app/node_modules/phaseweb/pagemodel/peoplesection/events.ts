import * as $ from "jquery";
import Client from "phaseweb/client";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import PeopleSection from "phaseweb/pagemodel/peoplesection";
import Templates from "phaseweb/templates";

class PeopleSectionEvents {
    private _peopleSection: PeopleSection;
    private _client: Client;

    constructor(peopleSection: PeopleSection, client: Client) {
        this._peopleSection = peopleSection;
        this._client = client;
        this.registerEvents();
    }

    /**
     * Registers the events for the people section
     */
    private registerEvents(): void {
        this.registerUsersBodyClick();
        this.registerUsersInDiscussionClick();
        this.registerPhaseUsersOnlineClick();
        this.registerAddDiscussionUserClick();
    }

    /**
     * Prevents drop down from closing when the body of it is clicked
     */
    private registerUsersBodyClick(): void {
        $(ElementIdentifiers.PeopleSection.list).on("mousedown", (e) => {
            e.stopPropagation();
        });
    }

    /**
     * Registers the click event on the discussion users drop down
     */
    private registerUsersInDiscussionClick(): void {
        $(ElementIdentifiers.PeopleSection.discussionUsers).on("mousedown", function() {
            const list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css("display") === "none") {
                list.css("display", "block");
            } else {
                list.css("display", "none");
            }
        });
    }

    /**
     * Registers the click event on the phase users drop down
     */
    private registerPhaseUsersOnlineClick(): void {
        $(ElementIdentifiers.PeopleSection.phaseUsers).on("mousedown", function() {
            const list = $(this).children(ElementIdentifiers.PeopleSection.list).first();
            if (list.css("display") === "none") {
                list.css("display", "block");
            } else {
                list.css("display", "none");
            }
        });
    }

    /**
     * Registers the click event on the discussion user add icon
     */
    private registerAddDiscussionUserClick(): void {
        $(ElementIdentifiers.PeopleSection.addDiscussionUser).on("mousedown", (e) => {
            e.stopImmediatePropagation();
            const form = $(Templates.AddDiscussionUser());
            $(ElementIdentifiers.PeopleSection.addDiscussionUserForm).remove();
            $(ElementIdentifiers.PeopleSection.discussionUsers).children(ElementIdentifiers.PeopleSection.list).prepend(form);
            $(ElementIdentifiers.PeopleSection.discussionUsers).children(ElementIdentifiers.PeopleSection.list).css("display", "block");

            const input = form.children("input");
            input.on("keydown", (event) => {
                if (event.keyCode === 13) {
                    const name = input.val();
                    const username = name.split("@")[0];
                    const systemName = name.split("@")[1];
                    this._client.addDiscussionUser(username, systemName || "");
                }
            });
        });

        // Must be done on mouseup as not possible to focus on mousedown
        $(ElementIdentifiers.PeopleSection.addDiscussionUser).on("mouseup", (e) => {
            $(ElementIdentifiers.PeopleSection.addDiscussionUserInput).focus();
        });

        $("body").on("mousedown", (e) => {
            if ($(e.target).attr("id") !== ElementIdentifiers.PeopleSection.addDiscussionUserForm.substr(1)
                || $(e.target).parents(ElementIdentifiers.PeopleSection.addDiscussionUserForm).length === 0) {
                $(ElementIdentifiers.PeopleSection.addDiscussionUserForm).remove();
            }
        });
    }
}

export default PeopleSectionEvents;
