import * as $ from 'jquery';
import { ScrollElement } from 'phaseweb/scroller';
import Scroller from 'phaseweb/scroller';
import Discussion from 'phaseclient/discussion';
import Templates from 'phaseweb/templates';
import ElementIdentifiers from 'phaseweb/elementidentifiers';
import SafeString from 'phaseclient/safestring';
import Client from 'phaseweb/client';
import DiscussionPreview from 'phaseweb/templates/discussionpreview';

class DiscussionSection {
    private _discusionListScroller: Scroller;
    private _client: Client;
    private liveTypingBarTimeouts: { [discussionId: number]: any };

    constructor(client: Client) {
        this._client = client;
        this.liveTypingBarTimeouts = {};
    }

    /**
     * Adds a discussion to the top of the discussions list
     * 
     * @param discussion The discussion to add to the discussion list
     */
    public prependDiscussionsList(discussion: Discussion): void {
        this._discusionListScroller.prependElement({
            element: new Templates.DiscussionListEntry(this._client, discussion),
            instance: discussion
        });
    }

    /**
     * Moves a discussion to the top of the displayed list
     * 
     * @param discussion The discussion to move to the top of the list
     */
    public moveDiscussionToTopOfList(discussion: Discussion): void {
        this._discusionListScroller.moveElementToFront(discussion, `#disc${discussion.getId()}`);
        this._discusionListScroller.onScroll();
    }

    /**
     * Updates the selected class to the newly switched discussion
     * 
     * @param elem The element that was clicked to switch discussion
     */
    public switchSelectedDiscussion(discussionId: number): void {
        $(ElementIdentifiers.DiscussionSection.selected).removeClass(ElementIdentifiers.DiscussionSection.selected.substr(1));
        $(ElementIdentifiers.DiscussionSection.identifier(discussionId)).addClass(ElementIdentifiers.DiscussionSection.selected.substr(1));
    }

    /**
     * Remove unread style to discussion div
     */
    public setDiscussionRead(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .removeClass('unread');
    }

    /**
     * Apply unread style to discussion div
     * 
     * @param discussion The discussion to set as unread
     */
    public setDiscussionUnread(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .addClass('unread');
    }

    /**
     * Update the preview of the discussion div in the discussion list
     * 
     * @param discussion The discussion to update preview for
     */
    public updateDiscussionEntryMessagePreview(discussion: Discussion): void {
        let messageContent = <SafeString> discussion.getRecentMessage().getContent();
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()))
            .children(ElementIdentifiers.DiscussionSection.preview)
            .html(DiscussionPreview(this._client, discussion, discussion.getRecentMessage()));
    }

    

    /**
     * Ensures the live typing display bar is active for a discussion in the list
     * 
     * @param discussion The discussion to update the bar for
     */
    public updateDiscussionLiveTypingBar(discussion: Discussion): void {
        let discussionElement = $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId()));
        let unreadInprogressClass = ElementIdentifiers.DiscussionSection.unread_inprogress.substr(1);
        if (!discussionElement.hasClass(unreadInprogressClass)) {
            discussionElement.addClass(unreadInprogressClass);
        }

        if (this.liveTypingBarTimeouts[discussion.getId()]) {
            clearTimeout(this.liveTypingBarTimeouts[discussion.getId()]);
        }
        
        this.setLiveTypingBarTimeout(discussion);
    }

    /**
     * Ensures the live typing display bar is inactive for a discussion in the list
     * 
     * @param discussion The discussion to remove the bar for
     */
    public removeDiscussionLiveTypingBar(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.identifier(discussion.getId())).removeClass(ElementIdentifiers.DiscussionSection.unread_inprogress.substr(1));

        // Clear existing timeout
        if (this.liveTypingBarTimeouts[discussion.getId()]) {
            clearTimeout(this.liveTypingBarTimeouts[discussion.getId()]);
        }
    }

    /**
     * Sets a timeout for the display of the live typing bar
     * 
     * @param discussion The discussion to set the timeout for
     */
    private setLiveTypingBarTimeout(discussion: Discussion): void {
        this.liveTypingBarTimeouts[discussion.getId()] = setTimeout(() => {
            this.removeDiscussionLiveTypingBar(discussion);
        }, 1000);
    }

    public setupScroller(): void {
        this._discusionListScroller = new Scroller($(ElementIdentifiers.DiscussionSection.list), $(ElementIdentifiers.DiscussionSection.list), [], 70);
        $(ElementIdentifiers.DiscussionSection.list).on('scroll', () => {
            this._discusionListScroller.onScroll();
        });
    }

    /**
     * Registers a click on a discussion list element for switching discussions
     */
    public registerDiscussionListClick(): void {
        let self = this;
        $(ElementIdentifiers.DiscussionSection.list).on('mousedown', ElementIdentifiers.DiscussionSection.discussion, function() {
            self._client.switchDiscussion(+$(this).attr('id').substr(4));
        });
    }
}

export default DiscussionSection;