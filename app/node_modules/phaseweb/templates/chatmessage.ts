import Discussion from "phaseclient/discussion";
import Message from "phaseclient/message";
import ElementIdentifiers from "phaseweb/elementidentifiers";
import Hash from "phaseweb/hash";
import Client from "phaseweb/templates/client";

function shouldUseSystemName(client: Client, message: Message) {
    const useSystemName = client.getConfiguration().displayOtherSystemsNames
            && message.getSystemName() !== client.getSystemName()
            && message.getSystemName() !== null;

    return useSystemName;
}

/**
 * Gets whether the system name is to be used
 *
 * @param client The client
 * @param message The message being displayed
 */
function getUseSystemName(client: Client, message: Message): boolean {
    return message.getSystemName() !== client.getSystemName() && message.getSystemName() !== null;
}

/**
 * Gets the system name in HTML form
 *
 * @param client The client
 * @param message The message being displayed
 */
function getSystemNameTag(client: Client, message: Message): string {
    return getUseSystemName(client, message) ? `<span class="systemSuffix">@${message.getSystemName()}</span>` : ``;
}

/**
 * Gets the message tag in HTML form
 *
 * @param message The message being displayed
 */
function getMessageTag(message: Message): string {
    return getUseTag(message) ? `<span style="margin-left: 5px; color: ${message.getTagColour()}">${message.getTag()}</span>` : ``;
}

/**
 * Gets whether the message tag is to be displayed
 *
 * @param message The message being displayed
 */
function getUseTag(message: Message): boolean {
    return message.getTag().length > 0;
}

/**
 * Gets the online staus of a terraria user's message in HTML form
 *
 * @param client The client
 * @param message The message being displayed
 */
function getTerrariaStatus(client: Client, message: Message): string {
    const displayName = message.getDisplayName().getContentWithHtmlEscaped();
    const isInTerraria = client.getTerrariaUsers()[displayName];
    const terrariaStatusClass = isInTerraria
        ? ElementIdentifiers.Message.terrariaOnline.substr(1)
        : ElementIdentifiers.Message.terrariaOffline.substr(1);
    const statusServer = isInTerraria
        ? ` style="background: ${client.getTerrariaUsers()[displayName].getTagColour()}"`
        : "";
    let terrariaStatus = "";
    if (getUseTag(message) && !getUseSystemName(client, message)) {
        terrariaStatus = `<div class="${terrariaStatusClass} ${ElementIdentifiers.Message.terrariaStatus.substr(1)} `
          + `chat-terraria-${Hash(displayName)}"${statusServer}></div>`;
    }

    return terrariaStatus;
}

/**
 * Gets whether to use the alert styling on the message
 *
 * @param client The client
 * @param chatMessage The chat message text
 */
function getUseAlert(client: Client, chatMessage: string): boolean {
    return chatMessage.indexOf(client.getUsername()) > -1;
}

/**
 * Gets the alert symbol as HTML
 *
 * @param client The client
 * @param chatMessage  The chat message text
 */
function getAlertSymbolTag(client: Client, chatMessage: string): string {
    return getUseAlert(client, chatMessage) ? `<span class="chat-alert"><i class="fa fa-exclamation-circle" aria- hidden="true" ></i></span>` : ``;
}

/**
 * Adds styling to the text that caused an alert
 *
 * @param chatMessage The chat message text
 */
function addAlertStyling(client: Client, chatMessage: string): string {
    return chatMessage.replace(client.getUsername(), `<span class="alert-name">${client.getUsername()}</span>`);
}

export default function ChatMessage(client: Client, discussion: Discussion, message: Message) {
    const accountName = message.getGuestname().asIs().length > 0 && message.getUsername().asIs().length > 0 ? message.getUsername() : "";
    const displayName = message.getDisplayName().getContentWithHtmlEscaped();
    // Remove chat tags from name if they exist to "clean it up"
    const strippedName = displayName.replace(/\[(?:.*?):(.*?)]/g, "$1");
    const nameWasStripped = strippedName !== displayName;
    const visualStrippedIcon = nameWasStripped
        ? `<span class="chat-name-asterisk" title="${displayName}">*</span>`
        : "";

    const systemName = message.getSystemName();
    const tag = message.getTag();
    const tagColour = message.getTagColour();
    const chatMessage = addAlertStyling(client, message.getContentStyled());

    // Flags
    const isCreator = message.getUserId() === discussion.getCreator();
    const isMod = discussion.getModerators()[message.getUserId()];
    const isGuest = message.getUsername().asIs().length === 0 && message.getGuestname().asIs().length > 0;

    const guestClass = isGuest ? ` ${ElementIdentifiers.Message.guest.substr(1)}` : "";
    const creatorClass = isCreator ? ` ${ElementIdentifiers.Message.creator.substr(1)}` : "";
    const modClass = isMod ? ` ${ElementIdentifiers.Message.moderator.substr(1)}` : "";
    const creatorOrModClass = isCreator ? creatorClass : modClass;

    let templatedMessage = "";

    if (client.getConfiguration().shrinkJoinLeaveMessages && message.getUserId() === -2) {
        templatedMessage = `
        <li id="${message.getId()}" class="local${message.getLocalMessageId()}">
            <div class="${ElementIdentifiers.Message.avatar.substr(1)}">
                <div class="${ElementIdentifiers.Message.info.substr(1)}">`
                    + `${getMessageTag(message)}`
                + `</div>
            </div>
            <div class="chat-message-right">
                <div class="chat-message-content">${chatMessage}</div>
            </div>
            <div style="clear: both; content: ' '; height: 0"></div>
        </li>`;
    } else {
        templatedMessage = `
        <li id="${message.getId()}" class="local${message.getLocalMessageId()}">
            <div class="${ElementIdentifiers.Message.avatar.substr(1)}">
                <img class="avatar_${message.getUserId()}"
                     src="${message.getAvatar()}"
                     onError="this.onerror=null;this.src='https://t.dark-gaming.com:3001/img/question-mark.jpg';">
                ${getTerrariaStatus(client, message)}
            </div>
            <div class="chat-message-right">
                <div class="${ElementIdentifiers.Message.info.substr(1)}">`
                    + `<span class="chat-name${creatorOrModClass}${guestClass}"
                             title="${accountName}">${strippedName}${visualStrippedIcon}</span>`
                    + `${(getSystemNameTag(client, message))}`
                    + `<span class="chat-timestamp">${message.getFormattedTimestamp()}</span>`
                    + `${getMessageTag(message)}`
                    + `${getAlertSymbolTag(client, chatMessage)}`
                + `</div>
                <div class="chat-message-content">${chatMessage}</div>
            </div>
            <div style="clear: both; content: ' '; height: 0"></div>
        </li>`;
    }

    return templatedMessage;
}
