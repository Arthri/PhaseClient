import {$, JQuery} from 'jquery';

/* Used for a performant list scroll controller. Allows thousands of elements to be scrolled in a list
 * without causing major delays in writing the elements to it */
class Scroller {
    elementList: JQuery;
    elements: Array<string>;
    elementHeight: number;
    elementsToDisplay: number;
    startIndex: number;
    endIndex: number;
    trueScrollPosition: number;

    constructor(elementList, elements, elementHeight) {
        this.elementList = elementList;
        this.elements = elements;
        this.elementHeight = elementHeight;
        this.elementsToDisplay = 20;
        this.startIndex = 0;
        this.endIndex = 20;
    }

    getElementList(): JQuery {
        return this.elementList
    }
    
    getElements(): Array<string> {
        return this.elements;
    }

    getElementHeight(): number {
        return this.elementHeight;
    }

    getElementsToDisplay(): number { 
        return this.elementsToDisplay;
    }

    getStartIndex(): number {
        return this.startIndex;
    }

    getEndIndex(): number {
        return this.endIndex;
    }

    getTrueScrollPosition(): number {
        return this.trueScrollPosition;
    }

    setElements(elements: Array<string>): void {
        this.elements = elements;
        this.redraw(this.startIndex, this.endIndex);
    }
    
    // Updates the current display of elements in the list element
    displayElements(): void {
        this.elementList.children().remove();
        for (let i = this.startIndex; i <= this.endIndex; i++) {
            this.elementList.append(this.elements[i]);
        }
    }

    // Called when a scroll event is trigger on the list element    
    onScroll(): void {
        // Find scroll positions
        var scrollPosition: number = this.elementList[0].scrollTop;
        var trueScrollPosition: number = this.startIndex*this.elementHeight + scrollPosition;
        var maxScrollPosition: number = this.elementList[0].scrollHeight - this.elementList[0].offsetHeight;

        // Set new true scroll position
        this.trueScrollPosition = trueScrollPosition;

        // Calculate start/end indexes for idsplay
        var start = Math.floor((trueScrollPosition/this.elementHeight)-(this.elementsToDisplay/2));
        var end = Math.floor((trueScrollPosition/this.elementHeight)+(this.elementsToDisplay/2));

        // Check whether an update to the display is necessary (close to boundaries)
        if (this.startIndex > 0 && start < this.startIndex && scrollPosition < this.elementHeight) {
            this.redraw(start, end);
        }	else if (this.endIndex+1 < this.elements.length && end > this.endIndex && scrollPosition > maxScrollPosition-this.elementHeight) {
            this.redraw(start, end);
        }
    }
    
    // Updates the display of elements and corrects the scroll position
    redraw(start: number, end: number): void {
        var oldStart = this.startIndex;
        var oldEnd = this.endIndex;
        
        // Ensure start is no lower than the lowest
        if (start < 0) {
            start = 0;
            end = start+this.elementsToDisplay;
        }
    
        this.startIndex = start;
        this.endIndex = end;
        this.displayElements();
        this.elementList[0].scrollTop = this.getTrueScrollPosition()-((this.startIndex)*this.elementHeight);
    }
}

export default Scroller;