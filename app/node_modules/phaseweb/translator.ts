import $ from "jquery";
import { Promise } from "ts-promise";

interface Translation {
    text: string;
    language: string;
}

interface TranslationResponse {
    status: number;
    translation: Translation;
}

class Translator {
    private _queuedTranslation;
    private _cache;

    constructor() {
        this._queuedTranslation = {};
        this._cache = {};
    }

    /**
     * Translates a given text to another language
     *
     * @param text The text to translate
     * @param lang The language of the text to translate to
     */
    public translate(text: string, lang: string): Promise<string> {
        if (typeof this._queuedTranslation[lang] === "undefined") {
            this._queuedTranslation[lang] = {};
        }

        if (this._queuedTranslation[lang][text]) {
            return this._queuedTranslation[lang][text];
        }

        const promise = new Promise<string>((resolve, reject) => {
            if (this._cache[text] && this._cache[text][lang]) {
                resolve(this._cache[text][lang]);
            } else {
                this.getTranslation(text, lang, resolve, reject);
            }
        });

        this._queuedTranslation[lang][text] = promise;
        return promise;
    }

    /**
     * Gets a translation for a given text using the http API
     *
     * @param text The text to translate
     * @param lang The target language to translate to
     * @param resolve The resolve function
     * @param reject The rejection method
     */
    private getTranslation(text: string, lang: string, resolve: (value: string) => void, reject: (value: string | Error) => void): void {
        $.ajax({
                url: `https://t.dark-gaming.com:8879/api/translate/${encodeURIComponent(text)}/${encodeURIComponent(lang)}`,
        })
        .done((data: TranslationResponse) => {
            if (data.status === 200) {
                if (!this._cache[text]) {
                    this._cache[text] = {};
                }

                this._cache[text][lang] = text;
                resolve(data.translation.text);
            } else {
                reject(new Error(`Status ${data.status} from API.`));
            }
        })
        .fail((err) => {
            reject(err);
        });
    }
}

export default Translator;
