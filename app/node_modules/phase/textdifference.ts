import EditQueue from 'phase/editqueue';
import * as JsDiff from 'diff';

class TextDifference {
    public static getEditQueue(oldText: string, newText: string): EditQueue {
    let queue: EditQueue = [];
    let diff: Array<JsDiff.IDiffResult>;

    // Depending on the change we might need to use a more general
    // difference comparison. This will reduce the CPU time required
    // to complete the operation, but will send more data. A trade off...

    // If the old text was empty, then the difference is absolute
    if (oldText.length === 0) {
      // Get a list of additions/deletions per line
      diff = JsDiff.diffLines(oldText, newText);
    } else if (Math.abs(oldText.length - newText.length) > 8000) {
      // Get a list of additions/deletions per line
      diff = JsDiff.diffLines(oldText, newText);
    } else if (Math.abs(oldText.length - newText.length) > 4000) {
      // Get a list of additions/deletions per word
      diff = JsDiff.diffWords(oldText, newText);
    } else {
      // Get a list of additions/deletions per character
      diff = JsDiff.diffChars(oldText, newText);
    }

    let diffParts = diff.length;
    let pos = 0;

    // Loop through every difference
    for (let i = 0; i < diffParts; i++) {
      let part = diff[i];

      // If the part is an addition
      if (part.added) {
        // Push the current value, starting position of the change in the original text and the length of the text change,
        // along with the type of change as 1 (addition)
        queue.push({
          text: part.value,
          pos: pos,
          len: part.value.length,
          t: 1
        });
      } else if (part.removed) {
        // Push starting position of the change in the original text and the length of the text change,
        // along with the type of change as 0 (removal)
        queue.push({
          //text: part.value, // This is not necessary to send off to server
          pos: pos,
          len: part.value.length,
          t: 0
        });

        // Offset the starting position of the next change in the original text backwards (cancelling the pos addition below). The removal means that any future insertion will
        // go where the deletion starts.
        pos -= part.value.length;
      }

      // Increment the starting position of the next change in the original text by the length
      // of the current part
      pos += part.value.length;
    }

    // Return the queue array with insertion/deletions
    return queue;
    }
}

export default TextDifference;