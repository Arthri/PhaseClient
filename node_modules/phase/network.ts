import * as SocketCluster from 'socketcluster-client';
import Client from 'phase/client';
import Socket from 'phase/socket';
import SetInformation from 'phase/messagetypes/setinformation';
import {Discussions, Discussion as ReceivedDiscussion} from 'phase/messagetypes/discussions';
import Discussion from 'phase/discussion';
import Message from 'phase/message';

class Network {
    private socket: Socket;
    private client: Client;

    constructor(client: Client, options: Object) {
        this.client = client;
        this.socket = SocketCluster.connect(options);
        this.socket.on('connect', () => {
            this.socket.emit('session', "7c52032f-8787-45f3-86a0-ebdf3bb51713");
        });
        this.socket.on('error', (error) => {
            this.onError(error);
        });

        // Server Messages
        this.socket.on('set information', (info) => {
            this.handleSetInformation(info);
        });

        this.socket.on('discussions list', (discussions) => {
            this.handleDiscussionsList(JSON.parse(discussions));
        });
    }

    private onError(error: string): void {
        console.log(`Error with connection ${error}`);
    }

    private handleSetInformation(info: SetInformation) {
        this.client.setId(info.userID);
        this.client.setUsername(info.name);
        this.client.setSystemName(info.systemName);
        this.client.setAvatar(info.avatar);
    }

    private handleDiscussionsList(discussions: Discussions): void {
        let discussion: ReceivedDiscussion;
        let message: Message;
        for (let i = discussions.length-1; i >= 0; i--) {
            discussion = discussions[i];
            message = new Message(0, discussion.Username || "", discussion.GuestName, discussion.Message, discussion.timestamp);
            this.client.addDiscussion(new Discussion(discussion.ID, discussion.Name, discussion.Creator, [], message));
        }
    }
}

export default Network;