import * as SocketCluster from 'socketcluster-client';
import Client from 'phase/client';
import Socket from 'phase/socket';
import SetInformation from 'phase/messagetypes/setinformation';
import {Discussions, Discussion as ReceivedDiscussion} from 'phase/messagetypes/discussions';
import DiscussionUsers from 'phase/messagetypes/discussionusers';
import { DiscussionMessages, DiscussionMessage } from 'phase/messagetypes/discussionmessages';
import Discussion from 'phase/discussion';
import Message from 'phase/message';
import User from 'phase/user';
import { UserHash, BooleanHash } from 'phase/hash';

class Network {
    private socket: Socket;
    private client: Client;

    constructor(client: Client, options: Object) {
        this.client = client;
        this.socket = SocketCluster.connect(options);
        this.socket.on('connect', () => {
            this.socket.emit('session', "7c52032f-8787-45f3-86a0-ebdf3bb51713");
        });
        this.socket.on('error', (error) => {
            this.onError(error);
        });

        // Server Messages
        this.socket.on('set information', (info) => {
            this.handleSetInformation(info);
        });

        this.socket.on('discussions list', (discussions) => {
            this.handleDiscussionsList(JSON.parse(discussions));
        });

        this.socket.on('discussion users', (discussionUsers) => {
            this.handleDiscussionUsers(discussionUsers);
        })

        this.socket.on('discussion messages', (discussionMessages) => {
            this.handleDiscussionMessages(discussionMessages);
        });
    }

    private onError(error: string): void {
        console.log(`Error with connection ${error}`);
    }

    /* Message Handlers */

    private handleSetInformation(info: SetInformation) {
        this.client.setId(info.userID);
        this.client.setUsername(info.name);
        this.client.setSystemName(info.systemName);
        this.client.setAvatar(info.avatar);
    }

    private handleDiscussionsList(discussions: Discussions): void {
        let discussion: ReceivedDiscussion;
        let message: Message;
        for (let i = discussions.length-1; i >= 0; i--) {
            discussion = discussions[i];
            message = new Message(0, "", discussion.Username || "", discussion.GuestName, discussion.Message, discussion.timestamp, this.client.getSystemName(), "", "");
            this.client.addDiscussion(new Discussion(discussion.ID, discussion.Name, discussion.Creator, [], message));
        }
    }

    private handleDiscussionUsers(discussionUsers: DiscussionUsers): void {
        let discussionID = discussionUsers.discID;
        let users = discussionUsers.users[1];
        let userList: Array<User> = [];
        let modList: BooleanHash = {};
        
        let user: User;
        for (let i = 0; i < users.length; i++) {
            if (this.client.getPhaseUsers()[users[i].userID]) {
                user = this.client.getPhaseUsers()[users[i].userID];
            } else {
                user = new User(users[i].userID, users[i].name, users[i].systemName, users[i].avatar, this.client.getSystemName());
                this.client.addPhaseUser(user);
            }
            
            userList.push(user);

            if (users[i].mod) {
                modList[user.getId()] = true;
            }
        }

        let discussion = this.client.getDiscussions()[discussionID];
        discussion.setMembers(userList);
        discussion.setModerators(modList);
    }

    private handleDiscussionMessages(discussionMessages: DiscussionMessages): void {
        let discussionID = discussionMessages.discID;
        let messages: DiscussionMessage[] = JSON.parse(discussionMessages.messages);
        let oldestId = discussionMessages.oldestID;
        let messageList: Array<Message> = [];
        let discussion = this.client.getDiscussions()[discussionID];

        if (!discussion)
            return;

        let user: User | null = null;
        let username: string;
        let guestname: string;
        for (let i = 0; i < messages.length; i++) {
            if (this.client.getPhaseUsers()[messages[i].userID]) {
                user = this.client.getPhaseUsers()[messages[i].userID];
            } else {
                if (!messages[i].guest) {
                    user = new User(messages[i].userID, messages[i].username, messages[i].systemName, messages[i].avatar, this.client.getSystemName());
                    this.client.addPhaseUser(user);
                }
            }

            // Server doesn't send message ID so for now it has to be set to a default
            if (messages[i].guest) {
                username = "";
                guestname = messages[i].username;
            } else {
                username = messages[i].username;
                guestname = "";
            }

            messageList.push(new Message(messages[i].userID, messages[i].avatar, username, guestname, messages[i].content, messages[i].timestamp, messages[i].systemName, messages[i].tag || "", messages[i].tagcolour || ""));
            user = null;
        }

        discussion.setMessages(messageList);
        this.client.getPageModel().clearMessages();
        this.client.getPageModel().displayMessages(discussion);
    }

    /* Message Requests */

    public requestDiscussionDetails(discussionId: number): void {
        this.socket.emit('discussion users', `${discussionId}`);
        this.socket.emit('discussion messages', `${discussionId}`);
    }
}

export default Network;