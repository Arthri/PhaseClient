import ElementIdentifiers from 'phase/elementidentifiers';
import Templates from 'phase/templates';
import * as $ from 'jquery';
import Client from 'phase/client';
import Discussion from 'phase/discussion';
import Message from 'phase/message';

class PageModel {
    private client: Client;
    private loginLoadingTimeout: number;

    constructor(client: Client) {
        this.client = client;
        this.registerEvents();
    }

    /* Updates the client username in the DOM */
    public updateUsername(username: string): void {
        $(ElementIdentifiers.clientUsername).text(username);
    }

    /* Updates the client avatar in the DOM */
    public updateAvatar(avatar: string): void {
        $(ElementIdentifiers.ChatInput.avatar).html(`<img src="${avatar}" />`);
    }

    /* Clears the existing displayed list and puts in an updated one */
    public refreshUsersOnlineList(): void {
        let sectionList = $(ElementIdentifiers.PeopleSection.main).children(ElementIdentifiers.PeopleSection.list).children('ul');
        sectionList.html('');

        let user;
        let onlineUsers = this.client.getOnlineUsers();
        for (let i = 0; i < onlineUsers.length; i++) {
            user = onlineUsers[i];
            sectionList.append(Templates.PeopleEntry(user));
        }
    }

    /* Adds a discussion to the top of the discussions list */
    public prependDiscussionsList(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.list).prepend(Templates.DiscussionListEntry(discussion));
    }

    /* Updates the selected class to the newly switched discussion */
    public switchSelectedDiscussion(elem: any): void {
        $('.selected').removeClass('selected');
        elem.addClass('selected');
    }

    /* Clears the displayed messages */
    public clearMessages(): void {
        $(ElementIdentifiers.ChatSection.list).children().remove();
    }

    /* Displays 40 messages in the chat list from the specified discussion */
    public displayMessages(discussion: Discussion): void {
        let messages = discussion.getMessages();
        let minIndex = messages.length-41 < 0 ? 0 : messages.length-41;
        for (let i = minIndex; i < messages.length; i++) {
            $(ElementIdentifiers.ChatSection.list).append(Templates.ChatMessage(this.client, messages[i]));
        }

        // Scroll the chat to the bottom
        let chatElement = $(ElementIdentifiers.ChatSection.scrollSection);
        chatElement[0].scrollTop = chatElement[0].scrollHeight;
    }

    public removeOldestMessages(amount: number): void {
        $(ElementIdentifiers.ChatSection.list).children().slice(0, amount).remove();
    }

    public appendMessage(message: Message): void {
        let chatElement = $(ElementIdentifiers.ChatSection.scrollSection);
        let maximumScroll = chatElement[0].scrollHeight - chatElement[0].offsetHeight;
        let currentScroll = chatElement[0].scrollTop;
        let scrollIsAtBottom = currentScroll == maximumScroll;

        // Add message to list
        $(ElementIdentifiers.ChatSection.list).append(Templates.ChatMessage(this.client, message));   

        // Scroll the chat to the bottom if they were at the bottom before
        if (scrollIsAtBottom) {
            // Remove messages that go over max of 40 in display
            this.removeOldestMessages($(ElementIdentifiers.ChatSection.list).children().length-40);
            let newMaximumScroll = chatElement[0].scrollHeight - chatElement[0].offsetHeight;
            chatElement[0].scrollTop = newMaximumScroll;
        }
    }

    public setDiscussionRead(discussion: Discussion): void {
        $(`#disc${discussion.getId()}`)
            .removeClass('unread');
    }

    public setDiscussionUnread(discussion: Discussion): void {
        $(`#disc${discussion.getId()}`)
            .addClass('unread');
    }

    public updateDiscussionEntryMessagePreview(discussion: Discussion): void {
        $(`#disc${discussion.getId()}`)
            .children(ElementIdentifiers.DiscussionSection.preview)
            .text(`${discussion.getRecentMessage().getDisplayName().getContent()}: ${discussion.getRecentMessage().getContent().getContentWithBbcodeStripped()}`);
    }

    /* --
       EVENTS
       --      */
    private registerEvents(): void {
        this.registerDiscussionListClick();
        this.registerMessageSend();
        this.registerLogin();
    } 

    private registerDiscussionListClick(): void {
        let self = this;
        $(ElementIdentifiers.DiscussionSection.list).on('mousedown', ElementIdentifiers.DiscussionSection.discussion, function() {
            self.client.switchDiscussion(+$(this).attr('id').substr(4), $(this));
        });
    }

    private registerMessageSend(): void {
        let self = this;
        $(ElementIdentifiers.ChatInput.textInput).on('keydown', function(event) {
            self.handleMessageSend(this, event);
        });
    }

    private handleMessageSend(context: any, e: any): void {
        if (e.keyCode == 13) {
            let chatText = $(context).val();
            this.client.sendChatMessage(chatText);
            $(context).val('');
        }
    }

    private registerLogin(): void {
        $('#login_form').submit((e) => {
            e.preventDefault();
            $.ajax({
                method: "POST",
                url: "https://t.dark-gaming.com:3001/login",
                data: {
                username: $('#username').val(),
                password: $('#password').val(),
                server: $('#servername').find(':selected').text()
                },
                success: (data, textStatus, request) => {
                    this.handleLoginResponse(data, textStatus, request);
                }
            });
            return false;
        });
    }

    private setLoadingTimeout(): void {
        this.loginLoadingTimeout = setTimeout(() => {
            $('.loading').show();
            $('#login_container').addClass('inactive');
        }, 300);
    }

    private handleLoginResponse(data: {state: string}, textStatus: string, request: any): void {
        switch (data.state) {
            case "success":
                $('#phase').css("display", "block");
                $('#login_main').css("display", "none");
                this.client.sendInformationRequest();
                break;
            case "failure":
                $('#login_information').html('<span style="color: Red;">Invalid User/Pass Combination.</span>');
                break;
            case "no-body":
                $('#login_information').html('<span style="color: Red;">This form is invalid. Refresh the page.</span>');
                break;
            case "timeout":
                $('#login_information').html('<span style="color: Red;">The server selected is currently unresponsive.</span>');
                break;
            default:
                $('#login_information').html('<span style="color: Red;">Unknown error.</span>');
                break;
        }

        if (data.state !== 'success') {
            clearTimeout(this.loginLoadingTimeout);
            $('#login_container').removeClass('inactive');
            $('.loading').hide();

            setTimeout(() => {
                $('#login_information').html('');
            }, 4000);
        }
    }
}

export default PageModel;