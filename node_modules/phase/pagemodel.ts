import ElementIdentifiers from 'phase/elementidentifiers';
import Templates from 'phase/templates';
import * as $ from 'jquery';
import Client from 'phase/client';
import Discussion from 'phase/discussion';

class PageModel {
    private client: Client;

    constructor(client: Client) {
        this.client = client;
        this.registerEvents();
    }

    /* Updates the client username in the DOM */
    public updateUsername(username: string): void {
        $(ElementIdentifiers.clientUsername).text(username);
    }

    /* Updates the client avatar in the DOM */
    public updateAvatar(avatar: string): void {
        $(ElementIdentifiers.ChatInput.avatar).html(`<img src="${avatar}" />`);
    }

    /* Clears the existing displayed list and puts in an updated one */
    public refreshUsersOnlineList(): void {
        let sectionList = $(ElementIdentifiers.PeopleSection.main).children(ElementIdentifiers.PeopleSection.list).children('ul');
        sectionList.html('');

        let user;
        let onlineUsers = this.client.getOnlineUsers();
        for (let i = 0; i < onlineUsers.length; i++) {
            user = onlineUsers[i];
            sectionList.append(Templates.PeopleEntry(user));
        }
    }

    /* Adds a discussion to the top of the discussions list */
    public prependDiscussionsList(discussion: Discussion): void {
        $(ElementIdentifiers.DiscussionSection.list).prepend(Templates.DiscussionListEntry(discussion));
    }

    /* Updates the selected class to the newly switched discussion */
    public switchSelectedDiscussion(elem: any): void {
        $('.selected').removeClass('selected');
        elem.addClass('selected');
    }

    /* Clears the displayed messages */
    public clearMessages(): void {
        $(ElementIdentifiers.ChatSection.list).children().remove();
    }

    /* Displays 40 messages in the chat list from the specified discussion */
    public displayMessages(discussion: Discussion): void {
        let messages = discussion.getMessages();
        for (let i = 0; i < messages.length && i < 40; i++) {
            $(ElementIdentifiers.ChatSection.list).append(Templates.ChatMessage(this.client, messages[i]));
        }

        // Scroll the chat down
        let chatElement = $(ElementIdentifiers.ChatSection.scrollSection);
        chatElement[0].scrollTop = chatElement[0].scrollHeight;
    }

    /* --
       EVENTS
       --      */
    private registerEvents(): void {
        this.registerDiscussionListClick();
    } 

    private registerDiscussionListClick(): void {
        let self = this;
        $(ElementIdentifiers.DiscussionSection.list).on('click', ElementIdentifiers.DiscussionSection.discussion, function() {
            self.client.switchDiscussion(+$(this).attr('id').substr(4), $(this));
        });
    }
}

export default PageModel;