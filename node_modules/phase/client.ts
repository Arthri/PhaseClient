import Network from 'phase/network';
import User from 'phase/user';
import ElementIdentifiers from 'phase/elementidentifiers';
import PageModel from 'phase/pagemodel';
import Discussion from 'phase/discussion';
import { DiscussionHash, UserHash } from 'phase/hash';

class Client {
    private id: number;
    private username: string;
    private systemName: string;
    private onlineUsers: Array<User>;
    private avatar: string;
    private network: Network;
    private pageModel: PageModel;
    private discussions: DiscussionHash;
    private phaseUsers: UserHash;
    private currentDiscussion: Discussion | undefined;

    constructor(options: Object) {
        this.discussions = {};
        this.onlineUsers = [];
        this.phaseUsers = {};
        this.network = new Network(this, options);
        this.pageModel = new PageModel(this);
    }

    public setId(id: number): void {
        this.id = id;
    }

    public getId(): number {
        return this.id;
    }

    public setUsername(username: string): void {
        this.username = username;
        this.pageModel.updateUsername(username);
    }

    public getUsername(): string {
        return this.username;
    }

    public setSystemName(systemName: string): void {
        this.systemName = systemName;
    }

    public getSystemName(): string {
        return this.systemName;
    }

    public getOnlineUsers(): Array<User> {
        return this.onlineUsers;
    }

    public getAvatar(): string {
        return this.avatar;
    }

    public getPageModel(): PageModel {
        return this.pageModel;
    }
    
    public getDiscussions(): DiscussionHash {
        return this.discussions;
    }

    public getPhaseUsers(): UserHash {
        return this.phaseUsers;
    }

    /* Updates the users avatar in the chat input area */
    public setAvatar(avatar: string): void {
        this.avatar = avatar;
        this.pageModel.updateAvatar(avatar);
        this.pageModel.refreshUsersOnlineList();
    }

    /* Adds a phase users information to the clients phase users object */
    public addPhaseUser(user: User): void {
        this.getPhaseUsers()[user.getId()] = user;
    }

    /* Appends a discussion to the clients list of discussions and updates page */
    public addDiscussion(discussion: Discussion): void {
        this.discussions[discussion.getId()] = discussion;
        this.pageModel.prependDiscussionsList(discussion);
    }

    /* Switches current discussion
       @param discussionId
            The id of the discussion to switch to
       @param eventElem
            The $(element) that was clicked to cause this event
     */
    public switchDiscussion(discussionId: number, eventElem: any): void {
        let discussion = this.getDiscussions()[discussionId];

        if (!discussion)
            return;

        if (discussion.getMembers().length === 0) {
            this.network.requestDiscussionDetails(discussionId);
        }

        if (this.currentDiscussion) {
            this.currentDiscussion.setIsBeingViewed(false);
        }

        discussion.setIsBeingViewed(true);
        this.currentDiscussion = discussion;
        this.getPageModel().switchSelectedDiscussion(eventElem);
    }
}

export default Client;