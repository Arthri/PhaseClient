import Channel from 'phase/network/channel';

interface Socket {
        id: string;
        state: string;
        pendingReconnect: boolean;
        pendingReconnectTimeout: number;
        connectAttempts: number;
        authState: string;
        authToken: Object | null;
        CONNECTING: string;
        OPEN: string;
        CLOSED: string;
        AUTHENTICATED: string;
        UNAUTHENTICATED: string;
        PENDING: string;

        // Events:
        // error(err)
        // connect()
        // disconnect()
        // connectAbort()
        // raw()
        // kickOut(message, channelName)
        // subscribe()
        // subscribeFail()
        // unsubscribe()
        // authStateChange()
        // authTokenChange()
        // subscribeStateChange()
        // subscribeRequest()
        // authenticate()
        // deauthenticate()
        // message()

        connect(): void;
        getState(): string;
        getAuthToken(): Object;
        getSignedAuthToken(): Object;
        disconnect([]): void;
        emit(event: string, data: string | Object, callback?: () => void): void;
        on(event: string, handler: (any) => void): void;
        off(event: string, handler: (any) => void): void;
        send(data: string): void;
        publish(channelName: string, data: string, callback: () => void): void;
        subscribe(channelName: string): Channel;
        unsubscribe(channelName: string): void;
}

export default Socket;